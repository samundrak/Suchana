var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/App.html",[0,0.163,1,1.694]],["body/classes/App.html",[0,0.126,1,1.924,2,0.74,3,0.146,4,0.128,5,0.128,6,2.355,7,1.702,8,3.211,9,0.415,10,1.702,11,4.12,12,1.702,13,4.823,14,3.312,15,1.525,16,3.036,17,1.509,18,2.557,19,2.557,20,2.557,21,1.115,22,0.021,23,3.096,24,2.033,25,2.355,26,1.308,27,2.756,28,1.808,29,3.312,30,2.756,31,3.47,32,2.355,33,4.061,34,3.08,35,3.654,36,2.756,37,1.428,38,3.863,39,2.756,40,2.355,41,2.756,42,2.756,43,3.036,44,1.735,45,1.735,46,3.312,47,1.893,48,1.735,49,1.893,50,1.735,51,1.893,52,0.396,53,2.756,54,1.893,55,2.557,56,3.47,57,3.47,58,1.09,59,0.146,60,2.355,61,0.008,62,0.012,63,0.008]],["title/controllers/AppController.html",[64,1.336,65,2.457]],["body/controllers/AppController.html",[0,0.203,3,0.236,4,0.206,5,0.206,9,0.668,22,0.021,24,1.403,26,0.903,37,1.356,52,0.462,59,0.236,61,0.013,62,0.016,63,0.013,64,2.104,65,3.87,66,1.657,67,3.792,68,1.882,69,5.564,70,4.439,71,1.403,72,0.852,73,3.602,74,3.792,75,2.794,76,3.048,77,1.329,78,4.439]],["title/modules/AppModule.html",[79,0.961,80,2.457]],["body/modules/AppModule.html",[0,0.113,3,0.131,4,0.115,5,0.115,21,0.422,22,0.021,52,0.555,59,0.131,61,0.007,62,0.011,63,0.007,65,3.105,66,1.399,72,0.475,73,3.317,74,2.113,79,1.214,80,4.79,81,0.978,82,1.25,83,1.439,84,1.439,85,1.25,86,2.446,87,1.338,88,2.113,89,2.113,90,2.113,91,3.589,92,3.589,93,3.589,94,3.589,95,3.589,96,3.589,97,3.589,98,2.179,99,1.439,100,1.439,101,2.473,102,2.846,103,2.572,104,2.473,105,2.113,106,2.113,107,1.699,108,1.171,109,2.473,110,2.473,111,2.473,112,2.473,113,1.699,114,2.473,115,1.338,116,2.113,117,2.473,118,2.473,119,2.473,120,2.473,121,2.473,122,1.876,123,1.876,124,1.876,125,2.473,126,1.876,127,1.876,128,1.876,129,1.876,130,1.876,131,1.876,132,2.473,133,2.473,134,2.473,135,2.473,136,2.113,137,2.473,138,2.113,139,2.473,140,1.25,141,2.473,142,1.557,143,2.473,144,2.113,145,2.473,146,2.113,147,2.473,148,2.113,149,2.473]],["title/classes/AppRepository.html",[0,0.163,150,1.936]],["body/classes/AppRepository.html",[0,0.218,1,2.267,2,1.285,3,0.254,4,0.222,5,0.222,7,2.476,22,0.021,52,0.526,58,1.892,59,0.254,61,0.014,62,0.017,63,0.014,72,0.919,150,3.196,151,4.09,152,4.4,153,1.599,154,3.63,155,4.09,156,4.787]],["title/injectables/AppService.html",[73,2.082,153,1.195]],["body/injectables/AppService.html",[0,0.214,3,0.249,4,0.217,5,0.217,9,0.706,22,0.021,26,0.954,37,1.404,52,0.385,59,0.249,61,0.013,62,0.017,63,0.013,68,1.948,69,5.675,71,1.482,72,0.9,73,3.394,77,1.404,153,1.948,157,2.537,158,4.006,159,4.689,160,4.689,161,4.689]],["title/controllers/AppsController.html",[64,1.336,162,2.457]],["body/controllers/AppsController.html",[0,0.101,3,0.117,4,0.102,5,0.102,9,0.332,12,1.923,15,1.627,17,1.459,21,0.877,22,0.021,24,1.627,26,1.047,37,1.453,52,0.495,59,0.117,61,0.006,62,0.01,63,0.006,64,0.824,66,0.824,68,1.146,71,1.627,72,0.424,75,1.388,76,1.514,77,1.54,162,2.356,163,1.884,164,1.388,165,1.673,166,1.994,167,2.127,168,1.996,169,1.996,170,1.996,171,1.996,172,1.884,173,3.169,174,2.383,175,2.693,176,1.673,177,2.205,178,1.816,179,1.884,180,2.205,181,1.283,182,2.601,183,2.205,184,1.283,185,2.601,186,2.205,187,1.283,188,3.701,189,2.601,190,2.205,191,2.159,192,2.65,193,1.673,194,1.514,195,1.673,196,1.514,197,1.514,198,1.673,199,2.931,200,2.931,201,1.884,202,1.193,203,2.356,204,1.673,205,1.884,206,1.884,207,2.356,208,1.884,209,1.884,210,2.449,211,1.884,212,1.193,213,2.601,214,1.283,215,2.205,216,1.884,217,1.514,218,1.673,219,1.114,220,2.931,221,1.193,222,2.205,223,1.884,224,1.884,225,1.884,226,2.159,227,1.733,228,2.205,229,2.205,230,1.673,231,2.205,232,1.884,233,2.205,234,1.673,235,2.205]],["title/modules/AppsModule.html",[79,0.961,91,2.252]],["body/modules/AppsModule.html",[0,0.154,3,0.179,4,0.156,5,0.156,16,2.125,22,0.021,52,0.554,59,0.179,61,0.01,62,0.013,63,0.01,66,1.754,72,0.648,79,1.45,81,1.335,82,1.706,83,1.964,84,1.964,85,1.706,86,2.922,87,1.826,91,3.999,98,2.733,99,1.964,100,1.964,103,2.318,107,2.318,108,1.599,150,2.541,162,3.709,202,1.826,210,3.697,211,2.884,236,2.884,237,2.884,238,3.376,239,3.376,240,2.56,241,2.884,242,2.541,243,3.376,244,2.56,245,1.964,246,2.733,247,3.376,248,2.56,249,2.56,250,2.125,251,3.376,252,2.56,253,2.318,254,2.56,255,2.56,256,2.56,257,3.562]],["title/injectables/AppsService.html",[153,1.195,210,2.082]],["body/injectables/AppsService.html",[0,0.083,1,2.872,3,0.096,4,0.084,5,0.084,9,0.272,11,2.504,12,1.857,14,3.205,15,1.663,16,1.845,17,1.417,21,0.852,22,0.021,26,1.016,28,1.644,37,1.266,52,0.488,58,0.715,59,0.096,61,0.005,62,0.008,63,0.005,68,0.979,71,1.476,72,0.347,77,1.397,108,0.857,115,1.586,150,2.703,153,0.979,155,1.546,157,0.979,165,1.372,166,2.872,167,2.147,168,1.705,169,1.705,170,1.705,171,1.705,172,2.504,173,2.907,174,2.094,175,2.492,178,1.764,179,2.504,181,1.705,184,1.705,187,1.705,188,3.312,194,2.013,206,1.546,209,1.546,210,1.705,212,0.979,213,2.223,214,1.053,219,2.525,221,2.703,226,1.845,227,1.867,241,1.546,245,1.053,258,1.546,259,2.013,260,1.546,261,4.495,262,4.495,263,1.809,264,1.809,265,2.931,266,1.809,267,1.809,268,1.809,269,1.809,270,3.695,271,1.809,272,3.156,273,1.809,274,1.809,275,2.504,276,1.242,277,1.546,278,2.537,279,1.809,280,2.931,281,2.931,282,2.504,283,1.809,284,1.809,285,1.809,286,1.546,287,1.809,288,1.546,289,1.809,290,1.809,291,1.809,292,1.372,293,1.809,294,1.809,295,2.504,296,1.372,297,1.372,298,1.809]],["title/classes/Audience.html",[0,0.163,23,2.082]],["body/classes/Audience.html",[0,0.162,2,0.952,3,0.188,4,0.164,5,0.164,7,2.036,8,3.49,9,0.534,10,2.036,12,1.957,17,1.69,18,3.058,19,3.058,20,3.058,21,1.065,22,0.021,23,2.827,24,1.975,26,1.271,28,2.162,29,2.435,37,1.169,38,3.489,43,3.489,44,2.232,45,2.232,46,3.806,47,2.435,48,2.232,49,2.435,50,2.232,51,2.435,52,0.399,54,2.435,55,3.058,58,1.402,59,0.188,61,0.01,62,0.014,63,0.01,299,3.029,300,4.735,301,4.858,302,3.546,303,3.546]],["title/controllers/AudienceController.html",[64,1.336,304,2.457]],["body/controllers/AudienceController.html",[0,0.117,3,0.136,4,0.119,5,0.119,9,0.386,12,2.04,15,1.623,17,1.456,21,0.875,22,0.021,24,1.74,26,1.119,37,1.59,52,0.451,59,0.136,61,0.007,62,0.011,63,0.007,64,0.957,66,0.957,68,1.285,71,1.74,72,0.492,75,1.614,76,1.76,77,1.648,164,1.614,167,2.335,168,2.988,169,2.239,170,2.239,171,2.688,176,1.944,178,1.813,181,1.491,182,2.918,184,1.491,185,2.918,187,1.491,189,2.918,191,2.422,192,2.908,193,1.944,194,1.76,195,1.944,196,1.76,197,1.76,198,1.944,212,1.387,214,1.491,217,1.76,230,1.944,234,1.944,304,2.643,305,2.19,306,2.563,307,2.563,308,3.773,309,3.947,310,2.563,311,2.563,312,2.563,313,2.563,314,3.881,315,2.563,316,1.76,317,2.563,318,2.688,319,2.19,320,3.288,321,2.563,322,2.563,323,2.563,324,2.563,325,2.563,326,2.563,327,2.563,328,2.563,329,2.563]],["title/modules/AudienceModule.html",[79,0.961,92,2.252]],["body/modules/AudienceModule.html",[0,0.159,3,0.185,4,0.161,5,0.161,16,2.189,22,0.021,52,0.549,59,0.185,61,0.01,62,0.014,63,0.01,66,1.79,72,0.668,79,1.473,81,1.375,82,1.758,83,2.024,84,2.024,85,1.758,86,2.969,87,1.882,92,4.037,98,2.79,99,2.024,100,2.024,103,2.389,107,2.389,108,1.647,150,1.882,202,1.882,240,2.638,244,2.638,245,2.024,246,2.79,248,2.638,249,2.638,250,2.189,252,2.638,253,2.389,254,2.638,255,2.638,256,2.638,257,3.636,304,3.768,318,3.731,319,2.972,330,2.972,331,2.972,332,3.478,333,3.478,334,2.972,335,2.972,336,3.478]],["title/classes/AudienceRepository.html",[0,0.163,246,2.082]],["body/classes/AudienceRepository.html",[0,0.224,2,1.32,3,0.261,4,0.228,5,0.228,7,2.517,22,0.02,23,2.86,52,0.493,58,1.943,59,0.261,61,0.014,62,0.017,63,0.014,152,4.452,154,3.728,246,3.494,337,4.199,338,4.915,339,4.915]],["title/injectables/AudienceService.html",[153,1.195,318,2.082]],["body/injectables/AudienceService.html",[0,0.107,1,1.111,3,0.125,4,0.109,5,0.109,9,0.353,12,1.972,14,1.611,15,1.673,17,1.501,21,0.902,22,0.021,23,3.08,26,1.136,28,2.738,37,1.399,52,0.477,58,0.928,59,0.125,61,0.007,62,0.01,63,0.007,68,1.202,71,1.838,72,0.451,77,1.585,108,1.111,150,3.022,153,1.202,157,1.27,166,2.073,167,1.819,168,2.856,169,2.094,170,2.094,171,2.094,178,1.869,181,2.094,184,2.094,187,2.094,212,1.27,214,1.365,219,1.186,221,1.27,227,1.186,246,3.383,259,2.471,260,2.005,261,4.967,275,3.074,276,1.611,277,2.005,278,3.006,295,2.005,296,4.014,297,1.78,308,3.66,309,3.074,314,3.66,318,2.094,320,3.074,334,2.005,335,2.005,340,2.005,341,2.347,342,3.599,343,2.347,344,2.347,345,2.347,346,2.347,347,2.347,348,2.347,349,2.347,350,2.347,351,2.005,352,2.005]],["title/controllers/AuthController.html",[64,1.336,353,2.457]],["body/controllers/AuthController.html",[0,0.133,3,0.155,4,0.135,5,0.135,9,0.44,12,1.032,15,1.577,17,1.415,21,0.851,22,0.021,24,1.577,26,1.015,52,0.497,59,0.155,61,0.008,62,0.012,63,0.008,64,1.092,66,1.092,68,1.416,71,1.577,72,0.561,75,1.84,77,1.494,140,1.477,164,1.84,166,3.091,174,1.777,175,2.592,178,1.761,191,1.84,192,1.84,196,2.007,197,2.007,198,2.217,201,2.497,202,1.582,203,2.007,205,2.497,216,2.497,217,2.007,292,2.217,353,2.912,354,2.497,355,4.595,356,3.622,357,4.24,358,2.923,359,3.637,360,4.24,361,2.923,362,2.923,363,2.923,364,2.923,365,2.923,366,2.923,367,2.923,368,2.497,369,2.217,370,2.903,371,2.497,372,2.217,373,2.923,374,2.923,375,2.923,376,2.923,377,2.923,378,2.923,379,2.923,380,2.923,381,2.497]],["title/classes/AuthCredentialsDto.html",[0,0.163,359,2.082]],["body/classes/AuthCredentialsDto.html",[0,0.253,2,1.158,3,0.229,4,0.2,5,0.2,9,0.649,10,2.319,21,0.943,22,0.02,24,1.749,26,1.126,37,1.551,52,0.354,59,0.229,61,0.012,62,0.016,63,0.012,140,3.087,142,3.845,359,3.219,382,5.219,383,3.685,384,4.314,385,4.314,386,6.109,387,4.314,388,4.727,389,3.271,390,2.715,391,3.685]],["title/modules/AuthModule.html",[79,0.961,93,2.252]],["body/modules/AuthModule.html",[0,0.148,3,0.172,4,0.15,5,0.15,16,2.042,22,0.021,52,0.54,59,0.172,61,0.009,62,0.013,63,0.009,66,1.706,72,0.623,79,1.42,81,1.283,82,1.639,83,1.888,84,1.888,85,1.639,86,2.86,87,2.86,93,4.211,98,2.658,99,1.888,100,1.888,103,2.228,107,2.228,108,1.537,202,1.755,240,3.464,242,1.755,244,2.46,245,1.888,248,2.46,249,2.46,250,2.042,252,2.46,253,2.228,254,2.46,255,2.46,256,2.46,257,3.464,353,3.63,370,3.65,371,2.772,392,2.772,393,2.772,394,2.772,395,4.391,396,3.244,397,3.244,398,2.46,399,3.244]],["title/injectables/AuthService.html",[153,1.195,370,2.082]],["body/injectables/AuthService.html",[0,0.137,3,0.159,4,0.139,5,0.139,9,0.451,15,1.601,17,1.435,21,0.863,22,0.021,26,1.03,52,0.502,59,0.159,61,0.009,62,0.012,63,0.009,68,1.443,71,1.366,72,0.576,77,1.293,108,1.421,153,1.443,157,1.623,166,2.895,174,1.811,178,1.787,219,2.183,221,2.739,226,1.888,227,1.516,242,2.996,245,1.745,259,2.966,262,5.382,276,2.06,278,2.966,282,3.691,288,3.691,355,2.275,356,4.325,359,3.752,369,2.275,370,2.513,398,2.275,400,2.563,401,3.691,402,3,403,3,404,3,405,3,406,4.32,407,2.719,408,4.32,409,3,410,3.691,411,1.888,412,2.563,413,2.563,414,3,415,3,416,3]],["title/classes/ContactModes.html",[0,0.163,417,2.713]],["body/classes/ContactModes.html",[0,0.158,2,0.93,3,0.184,4,0.161,5,0.161,7,2.004,8,3.465,9,0.521,10,2.004,12,1.933,17,1.674,18,3.01,19,3.01,20,3.01,21,1.056,22,0.021,24,1.959,26,1.26,28,2.128,37,1.151,38,3.447,43,3.447,44,2.181,45,2.181,46,3.76,47,2.38,48,2.181,49,2.38,50,2.181,51,2.38,52,0.392,54,2.38,55,3.01,58,1.37,59,0.184,61,0.01,62,0.014,63,0.01,113,3.76,417,3.627,418,4.153,419,2.96,420,5.476,421,5.476,422,3.465,423,3.465]],["title/modules/ContactModesModule.html",[79,0.961,94,2.252]],["body/modules/ContactModesModule.html",[0,0.234,3,0.273,4,0.238,5,0.238,22,0.02,52,0.421,59,0.273,61,0.015,62,0.018,63,0.015,72,0.986,79,1.656,81,2.03,94,3.882,113,3.527,418,3.895,424,5.136]],["title/classes/CreateAppDto.html",[0,0.163,173,2.082]],["body/classes/CreateAppDto.html",[0,0.263,2,1.234,3,0.244,4,0.213,5,0.213,9,0.691,10,2.414,15,1.989,21,0.783,22,0.02,24,1.453,26,0.935,37,1.386,52,0.377,59,0.244,61,0.013,62,0.017,63,0.013,173,3.351,389,3.485,390,2.892,391,3.925,425,4.92,426,3.485,427,4.595,428,4.595,429,4.92,430,3.925,431,3.925]],["title/classes/CreateAudienceDto.html",[0,0.163,308,2.252]],["body/classes/CreateAudienceDto.html",[0,0.263,2,1.234,3,0.244,4,0.213,5,0.213,9,0.691,10,2.414,21,0.783,22,0.02,24,1.453,26,0.935,37,1.386,52,0.377,59,0.244,61,0.013,62,0.017,63,0.013,300,5.374,308,3.625,388,4.92,389,3.485,390,2.892,430,3.925,431,3.925,432,4.92,433,3.485,434,4.595,435,4.595,436,4.595]],["title/classes/CreateNotificationDTO.html",[0,0.163,437,2.457]],["body/classes/CreateNotificationDTO.html",[0,0.236,2,1.045,3,0.207,4,0.18,5,0.18,9,0.586,10,2.168,21,1.13,22,0.021,24,1.838,26,1.182,37,1.491,52,0.424,59,0.207,61,0.011,62,0.015,63,0.011,115,3.351,174,2.436,390,2.45,429,4.965,437,3.553,438,5.291,439,3.325,440,4.965,441,3.892,442,4.408,443,5.174,444,3.892,445,6.194,446,3.892,447,3.892,448,3.325]],["title/classes/CreateUserDto.html",[0,0.163,449,2.082]],["body/classes/CreateUserDto.html",[0,0.244,2,1.435,3,0.284,4,0.248,5,0.248,22,0.019,59,0.284,61,0.015,62,0.018,63,0.015,449,3.674,450,4.567,451,4.054]],["title/modules/DatabaseModule.html",[79,0.961,452,2.713]],["body/modules/DatabaseModule.html",[0,0.224,3,0.261,4,0.228,5,0.228,22,0.021,52,0.493,59,0.261,61,0.014,62,0.017,63,0.014,72,0.944,79,1.612,81,1.943,86,2.659,87,2.659,452,4.554,453,4.915,454,4.917,455,4.915]],["title/interfaces/IJWTPayload.html",[411,2.252,456,2.457]],["body/interfaces/IJWTPayload.html",[3,0.253,4,0.221,5,0.221,9,0.717,10,2.468,12,2.358,21,1.004,22,0.02,28,2.845,37,1.539,59,0.253,61,0.014,62,0.017,63,0.014,140,3.375,411,3.707,456,3.27,457,4.762,458,4.068]],["title/injectables/JWTStrategy.html",[153,1.195,395,2.252]],["body/injectables/JWTStrategy.html",[0,0.147,3,0.171,4,0.149,5,0.149,7,1.345,9,0.483,15,1.433,17,1.285,21,0.773,22,0.021,26,0.922,52,0.527,59,0.171,61,0.009,62,0.013,63,0.009,68,1.514,71,1.015,72,0.616,77,0.961,108,1.52,140,2.291,153,1.514,157,1.737,166,2.489,174,2.203,175,1.52,178,1.6,202,1.737,219,2.291,226,2.021,227,1.622,242,3.383,250,2.021,253,2.204,259,3.113,276,2.204,278,2.204,372,2.434,395,2.854,398,2.434,407,2.854,410,3.873,411,3.595,412,2.743,413,2.743,459,2.743,460,4.534,461,3.21,462,3.21,463,4.534,464,3.21,465,4.534,466,3.21,467,3.21,468,3.21,469,2.743,470,3.21,471,3.21,472,3.21,473,3.21,474,3.21,475,3.21]],["title/classes/Notification.html",[0,0.163,115,1.936]],["body/classes/Notification.html",[0,0.175,2,1.032,3,0.204,4,0.178,5,0.178,9,0.578,10,2.15,12,2.039,21,1.051,22,0.021,24,1.826,26,1.175,28,2.283,29,3.966,32,3.283,34,3.891,37,1.235,38,3.879,52,0.421,55,3.229,58,1.519,59,0.204,61,0.011,62,0.015,63,0.011,115,2.776,440,4.934,442,4.869,448,3.283,476,3.283,477,5.775,478,3.843,479,3.843,480,6.162,481,3.843,482,3.843,483,3.843]],["title/modules/NotificationTrackersModule.html",[79,0.961,95,2.252]],["body/modules/NotificationTrackersModule.html",[0,0.234,3,0.273,4,0.238,5,0.238,22,0.02,52,0.421,59,0.273,61,0.015,62,0.018,63,0.015,72,0.986,79,1.656,81,2.03,95,3.882,116,4.388,484,5.136,485,5.136]],["title/controllers/NotificationsController.html",[64,1.336,102,2.252]],["body/controllers/NotificationsController.html",[0,0.176,3,0.205,4,0.179,5,0.179,9,0.967,15,1.22,17,1.094,21,0.658,22,0.021,24,1.627,26,1.047,37,0.929,52,0.422,59,0.205,61,0.011,62,0.015,63,0.011,64,1.441,66,1.441,68,1.718,71,1.627,72,0.741,77,1.54,102,3.238,115,2.088,164,2.429,176,2.927,178,1.362,191,3.238,192,2.429,196,2.65,197,2.65,212,2.088,217,2.65,437,4.239,486,3.297,487,3.859,488,5.145,489,3.859,490,3.859,491,5.145,492,3.859,493,3.859,494,3.859,495,3.859,496,3.859,497,3.859]],["title/modules/NotificationsModule.html",[79,0.961,96,2.252]],["body/modules/NotificationsModule.html",[0,0.224,3,0.261,4,0.228,5,0.228,22,0.021,52,0.493,59,0.261,61,0.014,62,0.017,63,0.014,66,2.242,72,0.944,79,1.612,81,1.943,96,3.78,102,4.081,498,4.915,499,4.915]],["title/guards/OnlyAppsGuard.html",[316,2.457,500,2.713]],["body/guards/OnlyAppsGuard.html",[0,0.187,3,0.218,4,0.19,5,0.19,9,0.617,15,1.297,17,1.163,21,0.699,22,0.021,26,0.834,31,4.575,35,2.816,52,0.439,59,0.218,61,0.012,62,0.015,63,0.012,68,1.789,71,1.297,72,0.788,77,1.228,153,1.789,178,1.448,316,3.677,407,3.371,501,4.101,502,3.504,503,6.559,504,4.101,505,5.401,506,4.101,507,5.355,508,5.963,509,3.504,510,4.101,511,4.101]],["title/classes/RecordChanges.html",[0,0.163,8,1.936]],["body/classes/RecordChanges.html",[0,0.179,2,1.054,3,0.209,4,0.182,5,0.182,7,2.181,8,2.815,9,0.591,10,2.181,17,1.762,18,3.674,19,3.674,20,3.674,21,1.06,22,0.021,24,1.845,26,1.187,43,4.183,44,2.471,45,3.275,48,3.674,50,3.674,52,0.322,58,1.552,59,0.209,61,0.011,62,0.015,63,0.011,512,3.354,513,5.837,514,3.925,515,3.925,516,3.925,517,5.203]],["title/classes/UpdateAppDto.html",[0,0.163,188,2.252]],["body/classes/UpdateAppDto.html",[0,0.226,2,1.327,3,0.263,4,0.229,5,0.229,7,2.071,22,0.02,52,0.494,59,0.263,61,0.014,62,0.017,63,0.014,167,2.497,173,2.875,188,3.792,213,3.748,426,3.748,518,4.222,519,4.222,520,3.748,521,3.748,522,4.942]],["title/classes/UpdateAudienceDto.html",[0,0.163,314,2.252]],["body/classes/UpdateAudienceDto.html",[0,0.244,2,1.435,3,0.284,4,0.248,5,0.248,22,0.019,59,0.284,61,0.015,62,0.018,63,0.015,314,3.975,433,4.054,523,4.567]],["title/classes/UpdateUserDto.html",[0,0.163,524,2.252]],["body/classes/UpdateUserDto.html",[0,0.226,2,1.327,3,0.263,4,0.229,5,0.229,7,2.071,22,0.02,52,0.494,59,0.263,61,0.014,62,0.017,63,0.014,167,2.497,449,2.875,451,3.748,519,4.222,520,3.748,521,3.748,524,3.792,525,4.222,526,3.748,527,4.942]],["title/classes/User.html",[0,0.163,174,1.499]],["body/classes/User.html",[0,0.245,2,1.444,3,0.286,4,0.249,5,0.249,22,0.019,59,0.286,61,0.015,62,0.018,63,0.015,174,2.656,528,4.594]],["title/classes/UserEntity.html",[0,0.163,175,1.694]],["body/classes/UserEntity.html",[0,0.106,1,2.315,2,0.625,3,0.124,4,0.108,5,0.108,7,1.499,8,3.013,9,0.35,10,1.499,12,1.538,15,0.736,17,1.496,18,2.252,19,2.252,20,2.252,21,1.087,22,0.021,24,1.981,25,1.99,26,1.297,28,1.592,29,2.991,35,3.824,37,1.576,38,3.505,40,1.99,43,2.742,44,1.466,45,1.466,46,2.991,47,1.599,48,1.466,49,1.599,50,1.466,51,1.599,52,0.401,54,1.599,55,2.252,56,3.056,57,3.056,58,0.921,59,0.124,60,1.99,61,0.007,62,0.01,63,0.007,68,1.195,71,0.736,77,0.697,140,2.201,142,3.077,165,3.304,166,2.063,175,1.694,178,0.822,219,1.177,221,1.26,407,2.252,529,1.99,530,4.356,531,4.356,532,3.722,533,3.056,534,2.329,535,3.578,536,2.329,537,2.329,538,2.329,539,3.578,540,4.888,541,2.329,542,2.329,543,2.329,544,3.578,545,2.329,546,2.713,547,1.99,548,3.578,549,3.056,550,3.578,551,2.329,552,2.329,553,2.329]],["title/classes/UserRepository.html",[0,0.163,242,1.936]],["body/classes/UserRepository.html",[0,0.1,1,2.778,2,0.588,3,0.116,4,0.101,5,0.101,7,1.43,9,0.329,12,1.479,15,1.496,17,1.341,21,0.807,22,0.021,26,0.962,28,1.865,37,1.307,52,0.481,58,0.866,59,0.116,61,0.006,62,0.01,63,0.006,68,1.139,71,1.496,72,0.42,77,1.021,140,2.39,142,2.638,152,2.877,154,1.661,166,2.854,174,1.983,175,1.616,178,1.67,199,1.871,200,2.914,207,2.342,208,1.871,218,1.661,219,2.591,221,2.938,223,1.871,224,1.871,225,1.871,226,2.147,227,2.117,242,1.845,286,1.871,292,1.661,355,1.661,359,3.584,369,1.661,372,1.661,381,2.914,401,2.914,407,2.147,532,5.01,533,3.58,546,2.587,547,1.871,549,1.871,554,1.871,555,3.411,556,3.411,557,3.411,558,2.19,559,3.411,560,3.411,561,2.19,562,3.411,563,2.19,564,2.19,565,2.19,566,2.19,567,1.661,568,2.19,569,2.19,570,2.19,571,2.19,572,2.19,573,2.19,574,2.19,575,3.411,576,2.19,577,2.19,578,2.19,579,2.19,580,2.19,581,3.411,582,2.19]],["title/controllers/UsersController.html",[64,1.336,583,2.457]],["body/controllers/UsersController.html",[0,0.125,3,0.145,4,0.127,5,0.127,9,0.411,12,2.088,15,1.675,17,1.502,21,0.903,22,0.021,24,1.787,26,1.15,37,1.544,52,0.435,59,0.145,61,0.008,62,0.012,63,0.008,64,1.02,66,1.02,68,1.348,71,1.787,72,0.525,75,1.719,76,1.876,77,1.692,164,1.719,167,2.039,168,3.083,169,2.347,170,2.347,171,2.347,178,1.87,181,1.589,182,3.06,184,1.589,185,3.06,187,1.589,189,3.06,191,3.02,192,2.54,193,2.072,194,1.876,195,2.072,212,1.478,214,1.589,230,2.072,232,2.334,234,2.072,449,3.442,524,3.954,526,3.06,583,2.771,584,2.334,585,2.334,586,2.334,587,2.732,588,2.732,589,2.732,590,2.732,591,2.732,592,2.791,593,2.334,594,2.732,595,2.732,596,2.732,597,2.732,598,2.732,599,2.732,600,2.732]],["title/modules/UsersModule.html",[79,0.961,97,2.252]],["body/modules/UsersModule.html",[0,0.193,3,0.225,4,0.196,5,0.196,22,0.021,52,0.497,59,0.225,61,0.012,62,0.016,63,0.012,66,2.041,72,0.813,79,1.626,81,1.674,82,2.139,83,2.463,84,2.463,85,2.139,86,3.276,87,2.291,97,4.271,98,3.181,99,2.463,100,2.463,583,4.158,592,3.948,593,3.617,601,3.617,602,3.617,603,4.234,604,4.234]],["title/injectables/UsersService.html",[153,1.195,592,2.082]],["body/injectables/UsersService.html",[0,0.133,3,0.155,4,0.135,5,0.135,9,0.44,12,2.139,15,1.73,17,1.552,21,0.933,22,0.021,26,1.182,28,2.905,37,1.398,52,0.409,59,0.155,61,0.008,62,0.012,63,0.008,68,1.416,71,1.976,72,0.561,77,1.739,153,1.416,157,1.582,167,2.143,168,3.184,169,2.467,170,2.467,171,2.467,174,2.294,178,1.932,181,2.467,184,2.467,187,2.467,212,1.582,214,1.701,227,1.477,296,4.406,297,2.217,351,2.497,352,2.497,449,3.38,524,3.935,526,3.215,585,2.497,586,3.622,592,2.467,605,2.497,606,2.923,607,2.923,608,2.923,609,2.923,610,2.923]],["title/coverage.html",[611,3.707]],["body/coverage.html",[0,0.304,1,0.949,5,0.093,6,1.711,8,1.084,21,0.341,22,0.021,23,1.165,61,0.006,62,0.009,63,0.006,64,1.953,65,1.375,67,1.711,73,1.165,85,1.012,102,1.261,113,1.375,115,1.721,122,1.519,123,1.519,124,1.519,126,1.519,127,1.519,128,1.519,129,1.519,130,1.519,131,1.519,150,1.084,151,1.711,153,1.747,158,1.711,162,1.375,163,1.711,173,1.165,174,0.839,175,0.949,188,1.261,203,1.375,204,1.519,207,1.375,210,1.165,227,1.012,242,1.084,246,1.165,258,1.711,299,1.711,304,1.375,305,1.711,308,1.261,314,1.261,316,1.375,318,1.165,337,1.711,340,1.711,353,1.375,354,1.711,359,1.165,370,1.165,382,1.711,383,1.711,395,1.261,400,1.711,411,1.261,417,1.519,418,1.519,419,1.711,425,1.711,426,2.412,432,1.711,433,2.412,437,1.375,438,1.711,439,1.711,449,1.165,450,1.711,451,2.412,454,1.519,456,1.375,458,1.711,459,1.711,476,1.711,486,1.711,500,1.519,502,1.711,512,1.711,518,1.711,523,1.711,524,1.261,525,1.711,528,1.711,529,1.711,554,1.711,567,1.519,583,1.375,584,1.711,592,1.165,605,1.711,611,1.519,612,2.003,613,2.003,614,2.003,615,7.245,616,4.913,617,5.229,618,2.003,619,2.003,620,6.752,621,2.003,622,2.003,623,4.504,624,2.003,625,2.003,626,4.913,627,1.711,628,6.003,629,1.711,630,4.683,631,1.711,632,1.711,633,4.504,634,3.379,635,2.003,636,2.003,637,2.003,638,2.003]],["title/dependencies.html",[82,2.175,639,2.985]],["body/dependencies.html",[0,0.234,22,0.021,58,1.519,61,0.011,62,0.015,63,0.011,72,0.738,82,1.942,105,3.283,106,3.283,108,1.82,202,2.079,245,2.236,250,3.229,272,3.283,390,2.419,469,4.383,509,3.283,520,2.914,521,2.914,546,2.914,640,5.775,641,3.843,642,3.843,643,3.843,644,3.843,645,5.13,646,3.843,647,3.843,648,3.843,649,3.843,650,3.843,651,3.843,652,3.843,653,3.843,654,3.843,655,3.843,656,3.843,657,3.843,658,3.283,659,3.843,660,3.283,661,3.843,662,3.843,663,3.843,664,3.843,665,3.843,666,3.843,667,3.843,668,3.843,669,3.843,670,3.843,671,3.843]],["title/miscellaneous/enumerations.html",[672,1.737,673,3.677]],["body/miscellaneous/enumerations.html",[9,0.752,22,0.02,61,0.014,62,0.017,63,0.014,442,4.599,672,2.907,673,4.268,674,4.996,675,4.996,676,6.064,677,5.801,678,6.064,679,6.064,680,6.064]],["title/miscellaneous/functions.html",[672,1.737,681,3.677]],["body/miscellaneous/functions.html",[9,0.652,14,4.204,15,1.936,17,1.736,21,0.739,22,0.02,61,0.012,62,0.016,63,0.012,71,1.37,77,1.662,85,3.094,122,4.209,123,4.209,124,4.209,178,2.161,218,3.287,220,3.703,632,3.703,634,3.703,658,3.703,672,2.522,681,3.703,682,4.334,683,6.123,684,4.334,685,4.334,686,5.55,687,4.334,688,4.334,689,4.334,690,4.334,691,4.334,692,4.334]],["title/index.html",[9,0.449,693,2.985,694,2.985]],["body/index.html",[1,1.699,4,0.166,22,0.021,61,0.01,62,0.014,63,0.01,152,2.463,611,2.72,695,3.587,696,3.587,697,4.897,698,3.587,699,3.587,700,3.587,701,3.587,702,3.587,703,3.587,704,3.587,705,3.587,706,3.587,707,3.587,708,5.576,709,3.587,710,3.587,711,3.587,712,6.625,713,3.587,714,3.587,715,6.473,716,3.587,717,3.587,718,4.897,719,3.587,720,3.587,721,3.587,722,3.587,723,4.897,724,4.897,725,3.587,726,3.587,727,3.587,728,4.897,729,4.897,730,3.587,731,3.587,732,3.587,733,3.587,734,3.587,735,3.065,736,3.587,737,3.587,738,3.587,739,3.587,740,3.587,741,3.587,742,3.587,743,3.587,744,3.587,745,3.587,746,3.587,747,3.587,748,3.587,749,3.587,750,3.587,751,3.587,752,3.587,753,3.587]],["title/modules.html",[81,1.933]],["body/modules.html",[22,0.016,61,0.013,62,0.016,63,0.013,80,3.108,81,1.79,91,2.849,92,2.849,93,2.849,94,2.849,95,2.849,96,2.849,97,2.849,452,3.433,735,5.777,754,6.762,755,6.762,756,7.155,757,6.56,758,6.56]],["title/overview.html",[759,4.176]],["body/overview.html",[2,0.871,22,0.02,61,0.009,62,0.013,63,0.009,66,1.211,73,3.076,79,0.871,80,4.921,81,1.283,82,1.639,83,1.888,84,1.888,85,1.639,86,1.755,87,1.755,88,2.772,89,2.772,90,2.772,91,3.807,92,3.807,93,4.143,94,3.328,95,3.328,96,3.328,97,3.807,98,2.658,99,1.888,100,1.888,157,1.755,210,3.076,236,2.772,237,2.772,318,3.076,330,2.772,331,2.772,370,3.076,392,2.772,393,2.772,394,2.772,395,4.057,456,2.228,500,2.46,592,3.076,601,2.772,602,2.772,759,2.772,760,3.244,761,4.568,762,3.244,763,4.568]],["title/miscellaneous/variables.html",[672,1.737,764,3.677]],["body/miscellaneous/variables.html",[9,0.44,21,1.145,22,0.021,34,5.027,35,2.912,37,1.541,61,0.008,62,0.012,63,0.008,77,0.875,126,3.215,127,3.215,128,3.215,129,3.215,130,3.215,131,3.215,136,3.622,138,3.622,140,2.143,142,2.669,144,3.622,146,2.497,148,2.497,166,1.385,175,1.385,203,2.912,204,2.217,207,3.426,219,1.477,221,1.582,368,2.497,454,3.215,505,2.497,567,3.783,627,3.622,629,2.497,630,2.497,631,2.497,660,2.497,672,1.701,677,5.663,764,2.497,765,2.923,766,6.251,767,2.923,768,2.923,769,2.923,770,2.923,771,2.923,772,2.923,773,2.923,774,2.923,775,2.923,776,2.923,777,2.923,778,2.923,779,2.923,780,2.923,781,2.923,782,2.923,783,2.923,784,2.923,785,2.923]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/App.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AppRepository.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"modules/ContactModesModule.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"interfaces/IJWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"modules/NotificationTrackersModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateAudienceDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["0.0.2",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["0.0.37",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["0.1.1",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["0.2.29",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":763,"title":{},"body":{"overview.html":{}}}],["1/1",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":762,"title":{},"body":{"overview.html":{}}}],["2.18.1",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["3.0.0",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["3.3.3",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":256,"title":{},"body":{"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{}}}],["4.0.0",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["5.0.0",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":761,"title":{},"body":{"overview.html":{}}}],["6.5.4",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":257,"title":{},"body":{"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{}}}],["6603",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.0.0",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["8.3.1",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":760,"title":{},"body":{"overview.html":{}}}],["_",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__dirname",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":282,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AuthService.html":{}}}],["action",{"_index":296,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"injectables/UsersService.html":{}}}],["add",{"_index":578,"title":{},"body":{"classes/UserRepository.html":{}}}],["addapps",{"_index":555,"title":{},"body":{"classes/UserRepository.html":{}}}],["addapps(userid",{"_index":557,"title":{},"body":{"classes/UserRepository.html":{}}}],["adds",{"_index":351,"title":{},"body":{"injectables/AudienceService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":736,"title":{},"body":{"index.html":{}}}],["angular",{"_index":706,"title":{},"body":{"index.html":{}}}],["app",{"_index":1,"title":{"classes/App.html":{}},"body":{"classes/App.html":{},"classes/AppRepository.html":{},"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"index.html":{}}}],["app.controller",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["app.dto",{"_index":213,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"classes/UpdateAppDto.html":{}}}],["app.dto.ts",{"_index":426,"title":{},"body":{"classes/CreateAppDto.html":{},"classes/UpdateAppDto.html":{},"coverage.html":{}}}],["app.dto.ts:7",{"_index":428,"title":{},"body":{"classes/CreateAppDto.html":{}}}],["app.key",{"_index":281,"title":{},"body":{"injectables/AppsService.html":{}}}],["app.name",{"_index":279,"title":{},"body":{"injectables/AppsService.html":{}}}],["app.secret",{"_index":284,"title":{},"body":{"injectables/AppsService.html":{}}}],["app.service",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":65,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appid",{"_index":309,"title":{},"body":{"controllers/AudienceController.html":{},"injectables/AudienceService.html":{}}}],["applications",{"_index":703,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":80,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apprepository",{"_index":150,"title":{"classes/AppRepository.html":{}},"body":{"classes/AppRepository.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"modules/AudienceModule.html":{},"injectables/AudienceService.html":{},"coverage.html":{}}}],["apps",{"_index":165,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"classes/UserEntity.html":{}}}],["apps.controller",{"_index":239,"title":{},"body":{"modules/AppsModule.html":{}}}],["apps.service",{"_index":211,"title":{},"body":{"controllers/AppsController.html":{},"modules/AppsModule.html":{}}}],["apps/:appid/audiences",{"_index":306,"title":{},"body":{"controllers/AudienceController.html":{}}}],["apps/apps.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["appscontroller",{"_index":162,"title":{"controllers/AppsController.html":{}},"body":{"controllers/AppsController.html":{},"modules/AppsModule.html":{},"coverage.html":{}}}],["appservice",{"_index":73,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appsmodule",{"_index":91,"title":{"modules/AppsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules.html":{},"overview.html":{}}}],["appsservice",{"_index":210,"title":{"injectables/AppsService.html":{}},"body":{"controllers/AppsController.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":166,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["audience",{"_index":23,"title":{"classes/Audience.html":{}},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"coverage.html":{}}}],["audience.controller",{"_index":333,"title":{},"body":{"modules/AudienceModule.html":{}}}],["audience.dto",{"_index":320,"title":{},"body":{"controllers/AudienceController.html":{},"injectables/AudienceService.html":{}}}],["audience.dto.ts",{"_index":433,"title":{},"body":{"classes/CreateAudienceDto.html":{},"classes/UpdateAudienceDto.html":{},"coverage.html":{}}}],["audience.dto.ts:7",{"_index":435,"title":{},"body":{"classes/CreateAudienceDto.html":{}}}],["audience.service",{"_index":319,"title":{},"body":{"controllers/AudienceController.html":{},"modules/AudienceModule.html":{}}}],["audience/audience.module",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["audiencecontroller",{"_index":304,"title":{"controllers/AudienceController.html":{}},"body":{"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"coverage.html":{}}}],["audiencemodule",{"_index":92,"title":{"modules/AudienceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AudienceModule.html":{},"modules.html":{},"overview.html":{}}}],["audiencerepository",{"_index":246,"title":{"classes/AudienceRepository.html":{}},"body":{"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"coverage.html":{}}}],["audiences",{"_index":11,"title":{},"body":{"classes/App.html":{},"injectables/AppsService.html":{}}}],["audienceservice",{"_index":318,"title":{"injectables/AudienceService.html":{}},"body":{"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"injectables/AudienceService.html":{},"coverage.html":{},"overview.html":{}}}],["auth",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["auth.controller",{"_index":397,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":353,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcredentials",{"_index":564,"title":{},"body":{"classes/UserRepository.html":{}}}],["authcredentials.username",{"_index":571,"title":{},"body":{"classes/UserRepository.html":{}}}],["authcredentialsdto",{"_index":359,"title":{"classes/AuthCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["authguard",{"_index":201,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AuthController.html":{}}}],["authmodule",{"_index":93,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":746,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":370,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":758,"title":{},"body":{"modules.html":{}}}],["await",{"_index":221,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":737,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":513,"title":{},"body":{"classes/RecordChanges.html":{}}}],["bcrypt",{"_index":546,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["bcrypt.gensalt",{"_index":570,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":551,"title":{},"body":{"classes/UserEntity.html":{}}}],["bcrypt.hashsync(password",{"_index":580,"title":{},"body":{"classes/UserRepository.html":{}}}],["body",{"_index":192,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/AuthController.html":{},"controllers/NotificationsController.html":{},"controllers/UsersController.html":{}}}],["bool",{"_index":33,"title":{},"body":{"classes/App.html":{}}}],["boolean",{"_index":31,"title":{},"body":{"classes/App.html":{},"guards/OnlyAppsGuard.html":{}}}],["bootstrap",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":756,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":754,"title":{},"body":{"modules.html":{}}}],["building",{"_index":698,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":503,"title":{},"body":{"guards/OnlyAppsGuard.html":{}}}],["canactivate(context",{"_index":504,"title":{},"body":{"guards/OnlyAppsGuard.html":{}}}],["catch",{"_index":223,"title":{},"body":{"controllers/AppsController.html":{},"classes/UserRepository.html":{}}}],["class",{"_index":0,"title":{"classes/App.html":{},"classes/AppRepository.html":{},"classes/Audience.html":{},"classes/AudienceRepository.html":{},"classes/AuthCredentialsDto.html":{},"classes/ContactModes.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateUserDto.html":{},"classes/Notification.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateAudienceDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}},"body":{"classes/App.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AppRepository.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"modules/ContactModesModule.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"modules/NotificationTrackersModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateAudienceDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/App.html":{},"classes/AppRepository.html":{},"classes/Audience.html":{},"classes/AudienceRepository.html":{},"classes/AuthCredentialsDto.html":{},"classes/ContactModes.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateUserDto.html":{},"classes/Notification.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateAudienceDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appsmodule",{"_index":236,"title":{},"body":{"modules/AppsModule.html":{},"overview.html":{}}}],["cluster_appsmodule_providers",{"_index":237,"title":{},"body":{"modules/AppsModule.html":{},"overview.html":{}}}],["cluster_audiencemodule",{"_index":330,"title":{},"body":{"modules/AudienceModule.html":{},"overview.html":{}}}],["cluster_audiencemodule_providers",{"_index":331,"title":{},"body":{"modules/AudienceModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":601,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":602,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":38,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/Notification.html":{},"classes/UserEntity.html":{}}}],["column({nullable",{"_index":535,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({select",{"_index":539,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({type",{"_index":32,"title":{},"body":{"classes/App.html":{},"classes/Notification.html":{}}}],["column({unique",{"_index":40,"title":{},"body":{"classes/App.html":{},"classes/UserEntity.html":{}}}],["config",{"_index":658,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{}}}],["conflictexception",{"_index":199,"title":{},"body":{"controllers/AppsController.html":{},"classes/UserRepository.html":{}}}],["conflictexception(username_exists",{"_index":576,"title":{},"body":{"classes/UserRepository.html":{}}}],["connection",{"_index":261,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AudienceService.html":{}}}],["console.log(app",{"_index":350,"title":{},"body":{"injectables/AudienceService.html":{}}}],["console.log(context",{"_index":511,"title":{},"body":{"guards/OnlyAppsGuard.html":{}}}],["console.log(createtaskdto",{"_index":496,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["const",{"_index":219,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["constants/values",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["constructor",{"_index":259,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["constructor(apprepository",{"_index":260,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AudienceService.html":{}}}],["constructor(private",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["constructor(userrepo",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(userrepository",{"_index":461,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["contact",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["contactmodes",{"_index":417,"title":{"classes/ContactModes.html":{}},"body":{"classes/ContactModes.html":{},"coverage.html":{}}}],["contactmodesmodule",{"_index":94,"title":{"modules/ContactModesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContactModesModule.html":{},"modules.html":{},"overview.html":{}}}],["context",{"_index":507,"title":{},"body":{"guards/OnlyAppsGuard.html":{}}}],["controller",{"_index":64,"title":{"controllers/AppController.html":{},"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/AuthController.html":{},"controllers/NotificationsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/AuthController.html":{},"controllers/NotificationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('apps",{"_index":215,"title":{},"body":{"controllers/AppsController.html":{}}}],["controller('apps/:appid/audiences",{"_index":321,"title":{},"body":{"controllers/AudienceController.html":{}}}],["controller('auth",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('notifications",{"_index":494,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["controller('users",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AppsController.html":{},"modules/AppsModule.html":{},"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":611,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":167,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(appid",{"_index":342,"title":{},"body":{"injectables/AudienceService.html":{}}}],["create(createappdto",{"_index":172,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{}}}],["create(createaudiencedto",{"_index":307,"title":{},"body":{"controllers/AudienceController.html":{}}}],["create(createuserdto",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createappdto",{"_index":173,"title":{"classes/CreateAppDto.html":{}},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"classes/CreateAppDto.html":{},"classes/UpdateAppDto.html":{},"coverage.html":{}}}],["createappdto.name",{"_index":280,"title":{},"body":{"injectables/AppsService.html":{}}}],["createaudiencedto",{"_index":308,"title":{"classes/CreateAudienceDto.html":{}},"body":{"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"classes/CreateAudienceDto.html":{},"coverage.html":{}}}],["createconnection",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["created",{"_index":18,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{}}}],["createdatecolumn",{"_index":517,"title":{},"body":{"classes/RecordChanges.html":{}}}],["createdatecolumn({type",{"_index":44,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{}}}],["createnotificationdto",{"_index":437,"title":{"classes/CreateNotificationDTO.html":{}},"body":{"classes/CreateNotificationDTO.html":{},"controllers/NotificationsController.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtask",{"_index":488,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["createtask(@body",{"_index":495,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["createtask(createtaskdto",{"_index":489,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["createtaskdto",{"_index":491,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["createuserdto",{"_index":449,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials.dto",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["credentials.dto.ts",{"_index":383,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:5",{"_index":387,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:9",{"_index":385,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["ctx",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":220,"title":{},"body":{"controllers/AppsController.html":{},"miscellaneous/functions.html":{}}}],["database",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["database.provider",{"_index":455,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database_connection",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databasemodule",{"_index":452,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/DatabaseModule.html":{},"modules.html":{}}}],["databaseproviders",{"_index":454,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":43,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{}}}],["db_host",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_name",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_password",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_port",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_type",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_username",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbconfig",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["dbconfig(db_host",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig(db_name",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig(db_password",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig(db_port",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig(db_type",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig(db_username",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig(key",{"_index":684,"title":{},"body":{"miscellaneous/functions.html":{}}}],["declarations",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":24,"title":{},"body":{"classes/App.html":{},"controllers/AppController.html":{},"controllers/AppsController.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"classes/ContactModes.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"classes/Notification.html":{},"controllers/NotificationsController.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/App.html":{},"classes/Notification.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":249,"title":{},"body":{"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{}}}],["defaultvalue",{"_index":686,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defined",{"_index":26,"title":{},"body":{"classes/App.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"controllers/NotificationsController.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":195,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":185,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/UsersController.html":{}}}],["deletedatecolumn",{"_index":48,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{}}}],["dependencies",{"_index":82,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":707,"title":{},"body":{"index.html":{}}}],["development",{"_index":714,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":493,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["dto.ts",{"_index":439,"title":{},"body":{"classes/CreateNotificationDTO.html":{},"coverage.html":{}}}],["dto.ts:12",{"_index":444,"title":{},"body":{"classes/CreateNotificationDTO.html":{}}}],["dto.ts:6",{"_index":446,"title":{},"body":{"classes/CreateNotificationDTO.html":{}}}],["dto.ts:9",{"_index":441,"title":{},"body":{"classes/CreateNotificationDTO.html":{}}}],["dto/create",{"_index":212,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/NotificationsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":214,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":725,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":699,"title":{},"body":{"index.html":{}}}],["emitter",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["entities",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/app.entity",{"_index":155,"title":{},"body":{"classes/AppRepository.html":{},"injectables/AppsService.html":{}}}],["entities/audience.entity",{"_index":338,"title":{},"body":{"classes/AudienceRepository.html":{}}}],["entity",{"_index":55,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/Notification.html":{},"classes/UserEntity.html":{}}}],["entityrepository",{"_index":154,"title":{},"body":{"classes/AppRepository.html":{},"classes/AudienceRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(app",{"_index":156,"title":{},"body":{"classes/AppRepository.html":{}}}],["entityrepository(audience",{"_index":339,"title":{},"body":{"classes/AudienceRepository.html":{}}}],["entityrepository(userentity",{"_index":569,"title":{},"body":{"classes/UserRepository.html":{}}}],["entity{.ts,.js",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum",{"_index":480,"title":{},"body":{"classes/Notification.html":{}}}],["enumerations",{"_index":673,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":688,"title":{},"body":{"miscellaneous/functions.html":{}}}],["envorconfig",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["envorconfig('node_env",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["envorconfig(key",{"_index":685,"title":{},"body":{"miscellaneous/functions.html":{}}}],["er_dup_entry",{"_index":207,"title":{},"body":{"controllers/AppsController.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":224,"title":{},"body":{"controllers/AppsController.html":{},"classes/UserRepository.html":{}}}],["err.code",{"_index":225,"title":{},"body":{"controllers/AppsController.html":{},"classes/UserRepository.html":{}}}],["eventemittermodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["executioncontext",{"_index":505,"title":{},"body":{"guards/OnlyAppsGuard.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":255,"title":{},"body":{"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{}}}],["export",{"_index":59,"title":{},"body":{"classes/App.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AppRepository.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"modules/ContactModesModule.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"interfaces/IJWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"modules/NotificationTrackersModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateAudienceDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":7,"title":{},"body":{"classes/App.html":{},"classes/AppRepository.html":{},"classes/Audience.html":{},"classes/AudienceRepository.html":{},"classes/ContactModes.html":{},"injectables/JWTStrategy.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":467,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":473,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["false",{"_index":540,"title":{},"body":{"classes/UserEntity.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/App.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AppRepository.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"modules/ContactModesModule.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"interfaces/IJWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"modules/NotificationTrackersModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateAudienceDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":168,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@getuser",{"_index":228,"title":{},"body":{"controllers/AppsController.html":{}}}],["findall(user",{"_index":179,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{}}}],["findone",{"_index":169,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":230,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":181,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["first",{"_index":687,"title":{},"body":{"miscellaneous/functions.html":{}}}],["first_name",{"_index":530,"title":{},"body":{"classes/UserEntity.html":{}}}],["found",{"_index":689,"title":{},"body":{"miscellaneous/functions.html":{}}}],["framework",{"_index":697,"title":{},"body":{"index.html":{}}}],["function",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":681,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/me",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me')@useguards(undefined",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":182,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/UsersController.html":{}}}],["gethello",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":693,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":203,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["graph",{"_index":757,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":732,"title":{},"body":{"index.html":{}}}],["guard",{"_index":500,"title":{"guards/OnlyAppsGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":501,"title":{},"body":{"guards/OnlyAppsGuard.html":{}}}],["hash",{"_index":550,"title":{},"body":{"classes/UserEntity.html":{}}}],["hashpassword",{"_index":556,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":560,"title":{},"body":{"classes/UserRepository.html":{}}}],["heavily",{"_index":704,"title":{},"body":{"index.html":{}}}],["hello",{"_index":160,"title":{},"body":{"injectables/AppService.html":{}}}],["helloworld",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["here",{"_index":743,"title":{},"body":{"index.html":{}}}],["high",{"_index":678,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["host",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":750,"title":{},"body":{"index.html":{}}}],["id",{"_index":12,"title":{},"body":{"classes/App.html":{},"controllers/AppsController.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/ContactModes.html":{},"interfaces/IJWTPayload.html":{},"classes/Notification.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["ijwtpayload",{"_index":411,"title":{"interfaces/IJWTPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IJWTPayload.html":{},"injectables/JWTStrategy.html":{},"coverage.html":{}}}],["implements",{"_index":510,"title":{},"body":{"guards/OnlyAppsGuard.html":{}}}],["import",{"_index":52,"title":{},"body":{"classes/App.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AppRepository.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"modules/ContactModesModule.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"modules/DatabaseModule.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"modules/NotificationTrackersModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/App.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"interfaces/IJWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"controllers/NotificationsController.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/App.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AppRepository.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"modules/ContactModesModule.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"interfaces/IJWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"modules/NotificationTrackersModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateAudienceDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inherited",{"_index":46,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/UserEntity.html":{}}}],["inject",{"_index":348,"title":{},"body":{"injectables/AudienceService.html":{}}}],["injectable",{"_index":153,"title":{"injectables/AppService.html":{},"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/UsersService.html":{}},"body":{"classes/AppRepository.html":{},"injectables/AppService.html":{},"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"guards/OnlyAppsGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":157,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectconnection",{"_index":275,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AudienceService.html":{}}}],["injectrepository",{"_index":276,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["injectrepository(apprepository",{"_index":277,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AudienceService.html":{}}}],["injectrepository(audiencerepository",{"_index":349,"title":{},"body":{"injectables/AudienceService.html":{}}}],["injectrepository(userrepository",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["inspired",{"_index":705,"title":{},"body":{"index.html":{}}}],["installation",{"_index":711,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":713,"title":{},"body":{"index.html":{}}}],["interface",{"_index":456,"title":{"interfaces/IJWTPayload.html":{}},"body":{"interfaces/IJWTPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":457,"title":{},"body":{"interfaces/IJWTPayload.html":{}}}],["interfaces/ijwtpayload",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["internalservererrorexception",{"_index":200,"title":{},"body":{"controllers/AppsController.html":{},"classes/UserRepository.html":{}}}],["is_active",{"_index":13,"title":{},"body":{"classes/App.html":{}}}],["is_deleted",{"_index":19,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{}}}],["isalphanumeric",{"_index":388,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateAudienceDto.html":{}}}],["isalphanumeric()@minlength(3)@maxlength(50",{"_index":434,"title":{},"body":{"classes/CreateAudienceDto.html":{}}}],["isalphanumeric()@minlength(8",{"_index":384,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isemail",{"_index":386,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isenum",{"_index":447,"title":{},"body":{"classes/CreateNotificationDTO.html":{}}}],["isenum(notificationtypeenum",{"_index":443,"title":{},"body":{"classes/CreateNotificationDTO.html":{}}}],["isnotempty",{"_index":445,"title":{},"body":{"classes/CreateNotificationDTO.html":{}}}],["isstring",{"_index":429,"title":{},"body":{"classes/CreateAppDto.html":{},"classes/CreateNotificationDTO.html":{}}}],["isstring()@maxlength(50)@minlength(8",{"_index":427,"title":{},"body":{"classes/CreateAppDto.html":{}}}],["join",{"_index":739,"title":{},"body":{"index.html":{}}}],["jointable",{"_index":56,"title":{},"body":{"classes/App.html":{},"classes/UserEntity.html":{}}}],["jwt",{"_index":250,"title":{},"body":{"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":472,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["jwtmodule",{"_index":244,"title":{},"body":{"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":252,"title":{},"body":{"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":262,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":395,"title":{"injectables/JWTStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":747,"title":{},"body":{"index.html":{}}}],["kept",{"_index":265,"title":{},"body":{"injectables/AppsService.html":{}}}],["key",{"_index":14,"title":{},"body":{"classes/App.html":{},"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"miscellaneous/functions.html":{}}}],["last_name",{"_index":531,"title":{},"body":{"classes/UserEntity.html":{}}}],["legend",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":753,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":729,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":579,"title":{},"body":{"classes/UserRepository.html":{}}}],["login",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(auth",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logincredentials",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["logincredentials",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["low",{"_index":680,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manytomany",{"_index":57,"title":{},"body":{"classes/App.html":{},"classes/UserEntity.html":{}}}],["manytomany(undefined)@jointable",{"_index":25,"title":{},"body":{"classes/App.html":{},"classes/UserEntity.html":{}}}],["matching",{"_index":62,"title":{},"body":{"classes/App.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AppRepository.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"modules/ContactModesModule.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"interfaces/IJWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"modules/NotificationTrackersModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateAudienceDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":430,"title":{},"body":{"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{}}}],["maxlength(50",{"_index":431,"title":{},"body":{"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{}}}],["me(@getuser",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["me(user",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["medium",{"_index":679,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["message",{"_index":440,"title":{},"body":{"classes/CreateNotificationDTO.html":{},"classes/Notification.html":{}}}],["metadata",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"controllers/NotificationsController.html":{},"guards/OnlyAppsGuard.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":389,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{}}}],["minlength(3",{"_index":436,"title":{},"body":{"classes/CreateAudienceDto.html":{}}}],["minlength(8",{"_index":391,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateAppDto.html":{}}}],["miscellaneous",{"_index":672,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":728,"title":{},"body":{"index.html":{}}}],["mode",{"_index":718,"title":{},"body":{"index.html":{}}}],["modes.entity.ts",{"_index":419,"title":{},"body":{"classes/ContactModes.html":{},"coverage.html":{}}}],["modes.entity.ts:10",{"_index":423,"title":{},"body":{"classes/ContactModes.html":{}}}],["modes.entity.ts:7",{"_index":422,"title":{},"body":{"classes/ContactModes.html":{}}}],["modes.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["modes.module.ts",{"_index":424,"title":{},"body":{"modules/ContactModesModule.html":{}}}],["modes/contact",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"classes/ContactModes.html":{},"modules/ContactModesModule.html":{},"coverage.html":{}}}],["module",{"_index":79,"title":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"modules/ContactModesModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationTrackersModule.html":{},"modules/NotificationsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"modules/ContactModesModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationTrackersModule.html":{},"modules/NotificationsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":81,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"modules/ContactModesModule.html":{},"modules/DatabaseModule.html":{},"modules/NotificationTrackersModule.html":{},"modules/NotificationsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":742,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":660,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":748,"title":{},"body":{"index.html":{}}}],["name",{"_index":15,"title":{},"body":{"classes/App.html":{},"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAppDto.html":{},"injectables/JWTStrategy.html":{},"controllers/NotificationsController.html":{},"guards/OnlyAppsGuard.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":708,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":752,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":72,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AppRepository.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ContactModesModule.html":{},"modules/DatabaseModule.html":{},"injectables/JWTStrategy.html":{},"modules/NotificationTrackersModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"guards/OnlyAppsGuard.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["nestjs/event",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":245,"title":{},"body":{"modules/AppsModule.html":{},"injectables/AppsService.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":520,"title":{},"body":{"classes/UpdateAppDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":202,"title":{},"body":{"controllers/AppsController.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"modules/AudienceModule.html":{},"injectables/AudienceService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"dependencies.html":{}}}],["new",{"_index":227,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["node.js",{"_index":696,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":270,"title":{},"body":{"injectables/AppsService.html":{}}}],["notification",{"_index":115,"title":{"classes/Notification.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppsService.html":{},"classes/CreateNotificationDTO.html":{},"classes/Notification.html":{},"controllers/NotificationsController.html":{},"coverage.html":{}}}],["notification_type",{"_index":477,"title":{},"body":{"classes/Notification.html":{}}}],["notifications",{"_index":487,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["notifications.controller",{"_index":499,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notifications/notifications.controller",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["notifications/notifications.module",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["notifications_saas",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notificationscontroller",{"_index":102,"title":{"controllers/NotificationsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"coverage.html":{}}}],["notificationsmodule",{"_index":96,"title":{"modules/NotificationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationsModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationtrackersmodule",{"_index":95,"title":{"modules/NotificationTrackersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationTrackersModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationtypeenum",{"_index":442,"title":{},"body":{"classes/CreateNotificationDTO.html":{},"classes/Notification.html":{},"miscellaneous/enumerations.html":{}}}],["notificationtypeenum.medium",{"_index":483,"title":{},"body":{"classes/Notification.html":{}}}],["npm",{"_index":712,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":548,"title":{},"body":{"classes/UserEntity.html":{}}}],["number",{"_index":28,"title":{},"body":{"classes/App.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"injectables/AudienceService.html":{},"classes/ContactModes.html":{},"interfaces/IJWTPayload.html":{},"classes/Notification.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":508,"title":{},"body":{"guards/OnlyAppsGuard.html":{}}}],["onlyappsguard",{"_index":316,"title":{"guards/OnlyAppsGuard.html":{}},"body":{"controllers/AudienceController.html":{},"guards/OnlyAppsGuard.html":{},"coverage.html":{}}}],["onlyconfig",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["onlyconfig('db.synchronize",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["onlyconfig(key",{"_index":691,"title":{},"body":{"miscellaneous/functions.html":{}}}],["open",{"_index":730,"title":{},"body":{"index.html":{}}}],["optional",{"_index":17,"title":{},"body":{"classes/App.html":{},"controllers/AppsController.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"injectables/JWTStrategy.html":{},"controllers/NotificationsController.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":759,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":639,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":194,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"controllers/UsersController.html":{}}}],["param('appid",{"_index":323,"title":{},"body":{"controllers/AudienceController.html":{}}}],["param('id",{"_index":327,"title":{},"body":{"controllers/AudienceController.html":{}}}],["parameters",{"_index":178,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"controllers/NotificationsController.html":{},"guards/OnlyAppsGuard.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["partialtype",{"_index":519,"title":{},"body":{"classes/UpdateAppDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createappdto",{"_index":522,"title":{},"body":{"classes/UpdateAppDto.html":{}}}],["partialtype(createuserdto",{"_index":527,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":469,"title":{},"body":{"injectables/JWTStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":240,"title":{},"body":{"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":248,"title":{},"body":{"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":466,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["passportstrategy(strategy",{"_index":470,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["password",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthCredentialsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":465,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["please",{"_index":740,"title":{},"body":{"index.html":{}}}],["port",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":191,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/AuthController.html":{},"controllers/NotificationsController.html":{},"controllers/UsersController.html":{}}}],["post('/login",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@usepipes(validationpipe",{"_index":176,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/NotificationsController.html":{}}}],["prefix",{"_index":164,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/AuthController.html":{},"controllers/NotificationsController.html":{},"controllers/UsersController.html":{}}}],["primarycolumn",{"_index":421,"title":{},"body":{"classes/ContactModes.html":{}}}],["primarygeneratedcolumn",{"_index":29,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/Notification.html":{},"classes/UserEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":301,"title":{},"body":{"classes/Audience.html":{}}}],["private",{"_index":278,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["production",{"_index":720,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":695,"title":{},"body":{"index.html":{}}}],["project",{"_index":731,"title":{},"body":{"index.html":{}}}],["promise",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"guards/OnlyAppsGuard.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["properties",{"_index":10,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/AuthCredentialsDto.html":{},"classes/ContactModes.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"interfaces/IJWTPayload.html":{},"classes/Notification.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{}}}],["provide",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["put",{"_index":193,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/UsersController.html":{}}}],["put(':id",{"_index":189,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/UsersController.html":{}}}],["read",{"_index":741,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/UsersController.html":{}}}],["recordchanges",{"_index":8,"title":{"classes/RecordChanges.html":{}},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["recordchanges:10",{"_index":47,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/UserEntity.html":{}}}],["recordchanges:13",{"_index":51,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/UserEntity.html":{}}}],["recordchanges:16",{"_index":49,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/UserEntity.html":{}}}],["reflect",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(@body",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(auth",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["relations",{"_index":293,"title":{},"body":{"injectables/AppsService.html":{}}}],["remove",{"_index":170,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":234,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":184,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removes",{"_index":352,"title":{},"body":{"injectables/AudienceService.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":152,"title":{},"body":{"classes/AppRepository.html":{},"classes/AudienceRepository.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["repository/app.repository",{"_index":241,"title":{},"body":{"modules/AppsModule.html":{},"injectables/AppsService.html":{}}}],["repository/audience.repository",{"_index":335,"title":{},"body":{"modules/AudienceModule.html":{},"injectables/AudienceService.html":{}}}],["req",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["result",{"_index":61,"title":{},"body":{"classes/App.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AppRepository.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"modules/ContactModesModule.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"interfaces/IJWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"modules/NotificationTrackersModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateAudienceDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":63,"title":{},"body":{"classes/App.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AppRepository.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"modules/ContactModesModule.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"interfaces/IJWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"modules/NotificationTrackersModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateAudienceDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":77,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"controllers/NotificationsController.html":{},"guards/OnlyAppsGuard.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"controllers/NotificationsController.html":{},"guards/OnlyAppsGuard.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":715,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":509,"title":{},"body":{"guards/OnlyAppsGuard.html":{},"dependencies.html":{}}}],["sa",{"_index":497,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["salt",{"_index":532,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["scalable",{"_index":700,"title":{},"body":{"index.html":{}}}],["secret",{"_index":16,"title":{},"body":{"classes/App.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{}}}],["secretfornow",{"_index":253,"title":{},"body":{"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{}}}],["secretorkey",{"_index":474,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["select",{"_index":549,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["server",{"_index":701,"title":{},"body":{"index.html":{}}}],["side",{"_index":702,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":254,"title":{},"body":{"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{}}}],["signup",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signup(authcredentials",{"_index":562,"title":{},"body":{"classes/UserRepository.html":{}}}],["signup(authcredentialsdto",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/App.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AppRepository.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"modules/AppsModule.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"modules/AudienceModule.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"modules/ContactModesModule.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"interfaces/IJWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"modules/NotificationTrackersModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UpdateAppDto.html":{},"classes/UpdateAudienceDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":734,"title":{},"body":{"index.html":{}}}],["src/.../configs.ts",{"_index":683,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../database.provider.ts",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../errors.ts",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":682,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../notificationtypeenum.ts",{"_index":674,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../values.ts",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":70,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":158,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":159,"title":{},"body":{"injectables/AppService.html":{}}}],["src/apps/apps.controller.ts",{"_index":163,"title":{},"body":{"controllers/AppsController.html":{},"coverage.html":{}}}],["src/apps/apps.controller.ts:31",{"_index":177,"title":{},"body":{"controllers/AppsController.html":{}}}],["src/apps/apps.controller.ts:48",{"_index":180,"title":{},"body":{"controllers/AppsController.html":{}}}],["src/apps/apps.controller.ts:53",{"_index":183,"title":{},"body":{"controllers/AppsController.html":{}}}],["src/apps/apps.controller.ts:58",{"_index":190,"title":{},"body":{"controllers/AppsController.html":{}}}],["src/apps/apps.controller.ts:63",{"_index":186,"title":{},"body":{"controllers/AppsController.html":{}}}],["src/apps/apps.module.ts",{"_index":238,"title":{},"body":{"modules/AppsModule.html":{}}}],["src/apps/apps.service.ts",{"_index":258,"title":{},"body":{"injectables/AppsService.html":{},"coverage.html":{}}}],["src/apps/apps.service.ts:14",{"_index":263,"title":{},"body":{"injectables/AppsService.html":{}}}],["src/apps/apps.service.ts:28",{"_index":264,"title":{},"body":{"injectables/AppsService.html":{}}}],["src/apps/apps.service.ts:43",{"_index":266,"title":{},"body":{"injectables/AppsService.html":{}}}],["src/apps/apps.service.ts:54",{"_index":267,"title":{},"body":{"injectables/AppsService.html":{}}}],["src/apps/apps.service.ts:64",{"_index":269,"title":{},"body":{"injectables/AppsService.html":{}}}],["src/apps/apps.service.ts:68",{"_index":268,"title":{},"body":{"injectables/AppsService.html":{}}}],["src/apps/dto/create",{"_index":425,"title":{},"body":{"classes/CreateAppDto.html":{},"coverage.html":{}}}],["src/apps/dto/update",{"_index":518,"title":{},"body":{"classes/UpdateAppDto.html":{},"coverage.html":{}}}],["src/apps/entities/app.entity",{"_index":547,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["src/apps/entities/app.entity.ts",{"_index":6,"title":{},"body":{"classes/App.html":{},"coverage.html":{}}}],["src/apps/entities/app.entity.ts:14",{"_index":30,"title":{},"body":{"classes/App.html":{}}}],["src/apps/entities/app.entity.ts:19",{"_index":41,"title":{},"body":{"classes/App.html":{}}}],["src/apps/entities/app.entity.ts:22",{"_index":39,"title":{},"body":{"classes/App.html":{}}}],["src/apps/entities/app.entity.ts:25",{"_index":42,"title":{},"body":{"classes/App.html":{}}}],["src/apps/entities/app.entity.ts:31",{"_index":36,"title":{},"body":{"classes/App.html":{}}}],["src/apps/entities/app.entity.ts:35",{"_index":27,"title":{},"body":{"classes/App.html":{}}}],["src/apps/repository/app.repository",{"_index":334,"title":{},"body":{"modules/AudienceModule.html":{},"injectables/AudienceService.html":{}}}],["src/apps/repository/app.repository.ts",{"_index":151,"title":{},"body":{"classes/AppRepository.html":{},"coverage.html":{}}}],["src/audience/audience.controller.ts",{"_index":305,"title":{},"body":{"controllers/AudienceController.html":{},"coverage.html":{}}}],["src/audience/audience.controller.ts:25",{"_index":310,"title":{},"body":{"controllers/AudienceController.html":{}}}],["src/audience/audience.controller.ts:33",{"_index":311,"title":{},"body":{"controllers/AudienceController.html":{}}}],["src/audience/audience.controller.ts:38",{"_index":312,"title":{},"body":{"controllers/AudienceController.html":{}}}],["src/audience/audience.controller.ts:43",{"_index":315,"title":{},"body":{"controllers/AudienceController.html":{}}}],["src/audience/audience.controller.ts:51",{"_index":313,"title":{},"body":{"controllers/AudienceController.html":{}}}],["src/audience/audience.module.ts",{"_index":332,"title":{},"body":{"modules/AudienceModule.html":{}}}],["src/audience/audience.service.ts",{"_index":340,"title":{},"body":{"injectables/AudienceService.html":{},"coverage.html":{}}}],["src/audience/audience.service.ts:10",{"_index":341,"title":{},"body":{"injectables/AudienceService.html":{}}}],["src/audience/audience.service.ts:19",{"_index":343,"title":{},"body":{"injectables/AudienceService.html":{}}}],["src/audience/audience.service.ts:25",{"_index":344,"title":{},"body":{"injectables/AudienceService.html":{}}}],["src/audience/audience.service.ts:29",{"_index":345,"title":{},"body":{"injectables/AudienceService.html":{}}}],["src/audience/audience.service.ts:33",{"_index":347,"title":{},"body":{"injectables/AudienceService.html":{}}}],["src/audience/audience.service.ts:37",{"_index":346,"title":{},"body":{"injectables/AudienceService.html":{}}}],["src/audience/dto/create",{"_index":432,"title":{},"body":{"classes/CreateAudienceDto.html":{},"coverage.html":{}}}],["src/audience/dto/update",{"_index":523,"title":{},"body":{"classes/UpdateAudienceDto.html":{},"coverage.html":{}}}],["src/audience/entities/audience.entity",{"_index":53,"title":{},"body":{"classes/App.html":{}}}],["src/audience/entities/audience.entity.ts",{"_index":299,"title":{},"body":{"classes/Audience.html":{},"coverage.html":{}}}],["src/audience/entities/audience.entity.ts:10",{"_index":303,"title":{},"body":{"classes/Audience.html":{}}}],["src/audience/entities/audience.entity.ts:7",{"_index":302,"title":{},"body":{"classes/Audience.html":{}}}],["src/audience/repository/audience.repository",{"_index":247,"title":{},"body":{"modules/AppsModule.html":{}}}],["src/audience/repository/audience.repository.ts",{"_index":337,"title":{},"body":{"classes/AudienceRepository.html":{},"coverage.html":{}}}],["src/auth/auth",{"_index":382,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":396,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:16",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/get",{"_index":204,"title":{},"body":{"controllers/AppsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/interfaces/ijwtpayload.ts",{"_index":458,"title":{},"body":{"interfaces/IJWTPayload.html":{},"coverage.html":{}}}],["src/auth/jwtstrategy.ts",{"_index":459,"title":{},"body":{"injectables/JWTStrategy.html":{},"coverage.html":{}}}],["src/auth/jwtstrategy.ts:10",{"_index":462,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/auth/jwtstrategy.ts:21",{"_index":464,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/auth/user.entity",{"_index":206,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{}}}],["src/auth/user.entity.ts",{"_index":529,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/auth/user.entity.ts:15",{"_index":537,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/user.entity.ts:20",{"_index":536,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/user.entity.ts:25",{"_index":538,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/user.entity.ts:30",{"_index":543,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/user.entity.ts:35",{"_index":541,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/user.entity.ts:40",{"_index":542,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/user.entity.ts:44",{"_index":534,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/user.entity.ts:46",{"_index":545,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/auth/user.repository",{"_index":243,"title":{},"body":{"modules/AppsModule.html":{}}}],["src/auth/user.repository.ts",{"_index":554,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/auth/user.repository.ts:15",{"_index":563,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/auth/user.repository.ts:31",{"_index":561,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/auth/user.repository.ts:35",{"_index":566,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/auth/user.repository.ts:55",{"_index":558,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/constants/errors",{"_index":568,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/constants/errors.ts",{"_index":629,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/constants/values",{"_index":208,"title":{},"body":{"controllers/AppsController.html":{},"classes/UserRepository.html":{}}}],["src/constants/values.ts",{"_index":630,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/contact",{"_index":418,"title":{},"body":{"classes/ContactModes.html":{},"modules/ContactModesModule.html":{},"coverage.html":{}}}],["src/database.module.ts",{"_index":453,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database.provider.ts",{"_index":631,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entities/recordchanges.entity",{"_index":54,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/UserEntity.html":{}}}],["src/entities/recordchanges.entity.ts",{"_index":512,"title":{},"body":{"classes/RecordChanges.html":{},"coverage.html":{}}}],["src/entities/recordchanges.entity.ts:10",{"_index":514,"title":{},"body":{"classes/RecordChanges.html":{}}}],["src/entities/recordchanges.entity.ts:13",{"_index":516,"title":{},"body":{"classes/RecordChanges.html":{}}}],["src/entities/recordchanges.entity.ts:16",{"_index":515,"title":{},"body":{"classes/RecordChanges.html":{}}}],["src/enums/notificationtypeenum",{"_index":448,"title":{},"body":{"classes/CreateNotificationDTO.html":{},"classes/Notification.html":{}}}],["src/enums/notificationtypeenum.ts",{"_index":675,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/guards/onlyappsguard",{"_index":317,"title":{},"body":{"controllers/AudienceController.html":{}}}],["src/guards/onlyappsguard.ts",{"_index":502,"title":{},"body":{"guards/OnlyAppsGuard.html":{},"coverage.html":{}}}],["src/guards/onlyappsguard.ts:6",{"_index":506,"title":{},"body":{"guards/OnlyAppsGuard.html":{}}}],["src/main.ts",{"_index":632,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/notification",{"_index":484,"title":{},"body":{"modules/NotificationTrackersModule.html":{}}}],["src/notifications/dto/create",{"_index":438,"title":{},"body":{"classes/CreateNotificationDTO.html":{},"coverage.html":{}}}],["src/notifications/notification.entity.ts",{"_index":476,"title":{},"body":{"classes/Notification.html":{},"coverage.html":{}}}],["src/notifications/notification.entity.ts:10",{"_index":479,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/notification.entity.ts:17",{"_index":482,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/notification.entity.ts:7",{"_index":478,"title":{},"body":{"classes/Notification.html":{}}}],["src/notifications/notifications.controller.ts",{"_index":486,"title":{},"body":{"controllers/NotificationsController.html":{},"coverage.html":{}}}],["src/notifications/notifications.controller.ts:15",{"_index":490,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/notifications/notifications.controller.ts:20",{"_index":492,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/notifications/notifications.module.ts",{"_index":498,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["src/users/dto/create",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":525,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":209,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":528,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:11",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:16",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:21",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:26",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:31",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":603,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":605,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":607,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":608,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:19",{"_index":610,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":609,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:7",{"_index":606,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/configs.ts",{"_index":634,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":716,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":719,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":721,"title":{},"body":{"index.html":{}}}],["started",{"_index":694,"title":{"index.html":{}},"body":{}}],["starter",{"_index":710,"title":{},"body":{"index.html":{}}}],["statements",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":744,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":468,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["string",{"_index":37,"title":{},"body":{"classes/App.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppsController.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"classes/AuthCredentialsDto.html":{},"classes/ContactModes.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"interfaces/IJWTPayload.html":{},"classes/Notification.html":{},"controllers/NotificationsController.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":471,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["support",{"_index":735,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":755,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":692,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":724,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":727,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":726,"title":{},"body":{"index.html":{}}}],["tests",{"_index":723,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":733,"title":{},"body":{"index.html":{}}}],["this.apprepository.findone",{"_index":295,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AudienceService.html":{}}}],["this.appservice.gethello",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["this.appsservice.create(createappdto",{"_index":222,"title":{},"body":{"controllers/AppsController.html":{}}}],["this.appsservice.findall(user",{"_index":229,"title":{},"body":{"controllers/AppsController.html":{}}}],["this.appsservice.findone(id",{"_index":231,"title":{},"body":{"controllers/AppsController.html":{}}}],["this.appsservice.remove(id",{"_index":235,"title":{},"body":{"controllers/AppsController.html":{}}}],["this.appsservice.update(+id",{"_index":233,"title":{},"body":{"controllers/AppsController.html":{}}}],["this.audienceservice.create(appid",{"_index":324,"title":{},"body":{"controllers/AudienceController.html":{}}}],["this.audienceservice.findall",{"_index":325,"title":{},"body":{"controllers/AudienceController.html":{}}}],["this.audienceservice.findone(+id",{"_index":326,"title":{},"body":{"controllers/AudienceController.html":{}}}],["this.audienceservice.remove(+id",{"_index":329,"title":{},"body":{"controllers/AudienceController.html":{}}}],["this.audienceservice.update(+id",{"_index":328,"title":{},"body":{"controllers/AudienceController.html":{}}}],["this.authservice.login(auth",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(auth",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.connection.getrepository(userentity",{"_index":289,"title":{},"body":{"injectables/AppsService.html":{}}}],["this.connection.manager.remove(app",{"_index":298,"title":{},"body":{"injectables/AppsService.html":{}}}],["this.connection.manager.save(app",{"_index":285,"title":{},"body":{"injectables/AppsService.html":{}}}],["this.connection.manager.save(user",{"_index":287,"title":{},"body":{"injectables/AppsService.html":{}}}],["this.findone",{"_index":581,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.hashpassword(authcredentials.password",{"_index":573,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.jwtservice.sign",{"_index":283,"title":{},"body":{"injectables/AppsService.html":{}}}],["this.jwtservice.sign(user",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":553,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.salt",{"_index":552,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.userrepo.signup(authcredentialsdto",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepo.validatepassword(logincredentials",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.findone",{"_index":475,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["this.usersservice.create(createuserdto",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(+id",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(+id",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":226,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/UserRepository.html":{}}}],["timestamp",{"_index":45,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{}}}],["todo",{"_index":577,"title":{},"body":{"classes/UserRepository.html":{}}}],["token",{"_index":300,"title":{},"body":{"classes/Audience.html":{},"classes/CreateAudienceDto.html":{}}}],["touch",{"_index":745,"title":{},"body":{"index.html":{}}}],["tpye",{"_index":420,"title":{},"body":{"classes/ContactModes.html":{}}}],["trackers.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["trackers.module.ts",{"_index":485,"title":{},"body":{"modules/NotificationTrackersModule.html":{}}}],["trackers/notification",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/NotificationTrackersModule.html":{}}}],["transformer",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":35,"title":{},"body":{"classes/App.html":{},"guards/OnlyAppsGuard.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":218,"title":{},"body":{"controllers/AppsController.html":{},"classes/UserRepository.html":{},"miscellaneous/functions.html":{}}}],["twitter",{"_index":751,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/App.html":{},"modules/AppModule.html":{},"controllers/AppsController.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/ContactModes.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"interfaces/IJWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/Notification.html":{},"controllers/NotificationsController.html":{},"guards/OnlyAppsGuard.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":58,"title":{},"body":{"classes/App.html":{},"classes/AppRepository.html":{},"injectables/AppsService.html":{},"classes/Audience.html":{},"classes/AudienceRepository.html":{},"injectables/AudienceService.html":{},"classes/ContactModes.html":{},"classes/Notification.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{}}}],["typeormmodule.forfeature",{"_index":251,"title":{},"body":{"modules/AppsModule.html":{}}}],["typeormmodule.forfeature([apprepository",{"_index":336,"title":{},"body":{"modules/AudienceModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":399,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forroot",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":521,"title":{},"body":{"classes/UpdateAppDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/bcrypt",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["types/config",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":709,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["undefined",{"_index":481,"title":{},"body":{"classes/Notification.html":{}}}],["unique",{"_index":60,"title":{},"body":{"classes/App.html":{},"classes/UserEntity.html":{}}}],["unit",{"_index":722,"title":{},"body":{"index.html":{}}}],["update",{"_index":171,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":232,"title":{},"body":{"controllers/AppsController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":187,"title":{},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateappdto",{"_index":188,"title":{"classes/UpdateAppDto.html":{}},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"classes/UpdateAppDto.html":{},"coverage.html":{}}}],["updateaudiencedto",{"_index":314,"title":{"classes/UpdateAudienceDto.html":{}},"body":{"controllers/AudienceController.html":{},"injectables/AudienceService.html":{},"classes/UpdateAudienceDto.html":{},"coverage.html":{}}}],["updated",{"_index":20,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{}}}],["updatedatecolumn",{"_index":50,"title":{},"body":{"classes/App.html":{},"classes/Audience.html":{},"classes/ContactModes.html":{},"classes/RecordChanges.html":{},"classes/UserEntity.html":{}}}],["updates",{"_index":297,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AudienceService.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":524,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["urgent",{"_index":676,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["usefactory",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":198,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/AuthController.html":{}}}],["useguards(authguard",{"_index":216,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AuthController.html":{}}}],["useguards(onlyappsguard",{"_index":322,"title":{},"body":{"controllers/AudienceController.html":{}}}],["usepipes",{"_index":196,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/AuthController.html":{},"controllers/NotificationsController.html":{}}}],["usepipes(validationpipe",{"_index":217,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/AuthController.html":{},"controllers/NotificationsController.html":{}}}],["usepipes(validationpipe)@post('/register",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":174,"title":{"classes/User.html":{}},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateNotificationDTO.html":{},"injectables/JWTStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.apps",{"_index":286,"title":{},"body":{"injectables/AppsService.html":{},"classes/UserRepository.html":{}}}],["user.decorator",{"_index":205,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AuthController.html":{}}}],["user.decorator.ts",{"_index":627,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":526,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.entity",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JWTStrategy.html":{},"classes/UserRepository.html":{}}}],["user.id",{"_index":292,"title":{},"body":{"injectables/AppsService.html":{},"controllers/AuthController.html":{},"classes/UserRepository.html":{}}}],["user.password",{"_index":572,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.repository",{"_index":398,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["user.salt",{"_index":574,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.save",{"_index":575,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.username",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepository.html":{}}}],["user.validatepassword(password",{"_index":582,"title":{},"body":{"classes/UserRepository.html":{}}}],["userapps",{"_index":290,"title":{},"body":{"injectables/AppsService.html":{}}}],["userapps.apps",{"_index":294,"title":{},"body":{"injectables/AppsService.html":{}}}],["userentity",{"_index":175,"title":{"classes/UserEntity.html":{}},"body":{"controllers/AppsController.html":{},"injectables/AppsService.html":{},"controllers/AuthController.html":{},"injectables/JWTStrategy.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":559,"title":{},"body":{"classes/UserRepository.html":{}}}],["username",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"interfaces/IJWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["username_exists",{"_index":567,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrepo",{"_index":288,"title":{},"body":{"injectables/AppsService.html":{},"injectables/AuthService.html":{}}}],["userrepo.findone",{"_index":291,"title":{},"body":{"injectables/AppsService.html":{}}}],["userrepository",{"_index":242,"title":{"classes/UserRepository.html":{}},"body":{"modules/AppsModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["users",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":604,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":583,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":97,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":592,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["utils/configs",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["uuid",{"_index":272,"title":{},"body":{"injectables/AppsService.html":{},"dependencies.html":{}}}],["uuidv5",{"_index":274,"title":{},"body":{"injectables/AppsService.html":{}}}],["v4",{"_index":271,"title":{},"body":{"injectables/AppsService.html":{}}}],["v5",{"_index":273,"title":{},"body":{"injectables/AppsService.html":{}}}],["validate",{"_index":460,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["validate(payload",{"_index":463,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["validatepassword",{"_index":533,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["validatepassword(authcredentialsdto",{"_index":565,"title":{},"body":{"classes/UserRepository.html":{}}}],["validatepassword(password",{"_index":544,"title":{},"body":{"classes/UserEntity.html":{}}}],["validationpipe",{"_index":197,"title":{},"body":{"controllers/AppsController.html":{},"controllers/AudienceController.html":{},"controllers/AuthController.html":{},"controllers/NotificationsController.html":{}}}],["validator",{"_index":390,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateAppDto.html":{},"classes/CreateAudienceDto.html":{},"classes/CreateNotificationDTO.html":{},"dependencies.html":{}}}],["value",{"_index":677,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":764,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":717,"title":{},"body":{"index.html":{}}}],["website",{"_index":749,"title":{},"body":{"index.html":{}}}],["world",{"_index":161,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":690,"title":{},"body":{"miscellaneous/functions.html":{}}}],["you'd",{"_index":738,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AppsModule.html":{},"modules/AudienceModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/App.html":{"url":"classes/App.html","title":"class - App","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  App\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apps/entities/app.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        RecordChanges\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                audiences\n                            \n                            \n                                id\n                            \n                            \n                                is_active\n                            \n                            \n                                key\n                            \n                            \n                                name\n                            \n                            \n                                secret\n                            \n                            \n                                    Optional\n                                created\n                            \n                            \n                                is_deleted\n                            \n                            \n                                    Optional\n                                updated\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            audiences\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Audience[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/apps/entities/app.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/apps/entities/app.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            is_active\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'bool', default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/apps/entities/app.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            key\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/apps/entities/app.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/apps/entities/app.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            secret\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/apps/entities/app.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         RecordChanges\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordChanges:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            is_deleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         RecordChanges\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordChanges:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         RecordChanges\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordChanges:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Audience } from 'src/audience/entities/audience.entity';\nimport { RecordChanges } from 'src/entities/RecordChanges.entity';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class App extends RecordChanges {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    unique: true,\n  })\n  name: string;\n\n  @Column()\n  key: string;\n\n  @Column()\n  secret: string;\n\n  @Column({\n    type: 'bool',\n    default: true,\n  })\n  is_active: boolean;\n\n  @ManyToMany(() => Audience)\n  @JoinTable()\n  audiences: Audience[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppsModule\n\nAppsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppsModule->AppModule\n\n\n\n\n\nAudienceModule\n\nAudienceModule\n\nAppModule -->\n\nAudienceModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nContactModesModule\n\nContactModesModule\n\nAppModule -->\n\nContactModesModule->AppModule\n\n\n\n\n\nNotificationTrackersModule\n\nNotificationTrackersModule\n\nAppModule -->\n\nNotificationTrackersModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            NotificationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppsModule\n                        \n                        \n                            AudienceModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ContactModesModule\n                        \n                        \n                            NotificationTrackersModule\n                        \n                        \n                            NotificationsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { NotificationsController } from './notifications/notifications.controller';\nimport { NotificationsModule } from './notifications/notifications.module';\nimport { ContactModesModule } from './contact-modes/contact-modes.module';\nimport { NotificationTrackersModule } from './notification-trackers/notification-trackers.module';\nimport { AudienceModule } from './audience/audience.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppsModule } from './apps/apps.module';\nimport { UsersModule } from './users/users.module';\nimport { dbConfig, envOrConfig, onlyConfig } from './utils/configs';\nimport {\n  DB_HOST,\n  DB_NAME,\n  DB_PASSWORD,\n  DB_PORT,\n  DB_TYPE,\n  DB_USERNAME,\n} from './constants/values';\n\n@Module({\n  imports: [\n    EventEmitterModule.forRoot(),\n    NotificationsModule,\n    TypeOrmModule.forRoot({\n      type: dbConfig(DB_TYPE),\n      host: dbConfig(DB_HOST),\n      port: dbConfig(DB_PORT),\n      username: dbConfig(DB_USERNAME),\n      password: dbConfig(DB_PASSWORD),\n      database: dbConfig(DB_NAME),\n      autoLoadEntities: envOrConfig('NODE_ENV'),\n      synchronize: onlyConfig('db.synchronize'),\n    }),\n    ContactModesModule,\n    NotificationTrackersModule,\n    AudienceModule,\n    AuthModule,\n    AppsModule,\n    UsersModule,\n  ],\n  controllers: [AppController, NotificationsController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppRepository.html":{"url":"classes/AppRepository.html","title":"class - AppRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apps/repository/app.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { EntityRepository, Repository } from 'typeorm';\nimport { App } from '../entities/app.entity';\n@EntityRepository(App)\nexport class AppRepository extends Repository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppsController.html":{"url":"controllers/AppsController.html","title":"controller - AppsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apps/apps.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                apps\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createAppDto: CreateAppDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/apps/apps.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAppDto\n                                    \n                                                CreateAppDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/apps/apps.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/apps/apps.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/apps/apps.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateAppDto: UpdateAppDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/apps/apps.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAppDto\n                                    \n                                                UpdateAppDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Put,\n  Param,\n  Delete,\n  UsePipes,\n  ValidationPipe,\n  UseGuards,\n  ConflictException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { GetUser } from 'src/auth/get-user.decorator';\nimport { UserEntity } from 'src/auth/User.entity';\nimport { ER_DUP_ENTRY } from 'src/constants/values';\nimport { User } from 'src/users/entities/user.entity';\nimport { AppsService } from './apps.service';\nimport { CreateAppDto } from './dto/create-app.dto';\nimport { UpdateAppDto } from './dto/update-app.dto';\n\n@Controller('apps')\n@UseGuards(AuthGuard())\nexport class AppsController {\n  constructor(private readonly appsService: AppsService) {}\n\n  @Post()\n  @UsePipes(ValidationPipe)\n  async create(\n    @Body() createAppDto: CreateAppDto,\n    @GetUser() user: UserEntity,\n  ) {\n    try {\n      const data = await this.appsService.create(createAppDto, user);\n\n      return data;\n    } catch (err) {\n      if (err.code === ER_DUP_ENTRY) {\n        throw new ConflictException();\n      }\n      throw new InternalServerErrorException();\n    }\n  }\n\n  @Get()\n  findAll(@GetUser() user: UserEntity) {\n    return this.appsService.findAll(user);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.appsService.findOne(id);\n  }\n\n  @Put(':id')\n  update(@Param('id') id: string, @Body() updateAppDto: UpdateAppDto) {\n    return this.appsService.update(+id, updateAppDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.appsService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppsModule.html":{"url":"modules/AppsModule.html","title":"module - AppsModule","body":"\n                   \n\n\n\n\n    Modules\n    AppsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppsModule\n\n\n\ncluster_AppsModule_providers\n\n\n\n\nAppsService\n\nAppsService\n\n\n\nAppsModule\n\nAppsModule\n\nAppsModule -->\n\nAppsService->AppsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/apps/apps.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppsService } from './apps.service';\nimport { AppsController } from './apps.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { AppRepository } from './repository/app.repository';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from 'src/auth/User.repository';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AudienceRepository } from 'src/audience/repository/audience.repository';\n\n@Module({\n  imports: [\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    TypeOrmModule.forFeature([\n      AppRepository,\n      UserRepository,\n      AudienceRepository,\n    ]),\n    JwtModule.register({\n      secret: 'secretfornow',\n      signOptions: {\n        expiresIn: 3600 * 60 * 60,\n      },\n    }),\n  ],\n  controllers: [AppsController],\n  providers: [AppsService],\n})\nexport class AppsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppsService.html":{"url":"injectables/AppsService.html","title":"injectable - AppsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apps/apps.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRepository: AppRepository, connection: Connection, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/apps/apps.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRepository\n                                                  \n                                                        \n                                                                        AppRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createAppDto: CreateAppDto, user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/apps/apps.service.ts:28\n                \n            \n\n\n            \n                \n                    Will create an app with key and secret where\naudiences and notification can kept\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAppDto\n                                    \n                                                CreateAppDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/apps/apps.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/apps/apps.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/apps/apps.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateAppDto: UpdateAppDto)\n                \n            \n\n\n            \n                \n                    Defined in src/apps/apps.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAppDto\n                                    \n                                                UpdateAppDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { v4 as uuid, v5 as uuidv5 } from 'uuid';\nimport { InjectConnection, InjectRepository } from '@nestjs/typeorm';\nimport { UserEntity } from 'src/auth/User.entity';\nimport { Connection } from 'typeorm';\nimport { CreateAppDto } from './dto/create-app.dto';\nimport { UpdateAppDto } from './dto/update-app.dto';\nimport { App } from './entities/app.entity';\nimport { AppRepository } from './repository/app.repository';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from 'src/users/entities/user.entity';\n\n@Injectable()\nexport class AppsService {\n  constructor(\n    @InjectRepository(AppRepository)\n    private appRepository: AppRepository,\n    @InjectConnection()\n    private connection: Connection,\n    private jwtService: JwtService,\n  ) {}\n  /**\n   * Will create an app with key and secret where\n   * audiences and notification can kept\n   * @param createAppDto\n   * @param user\n   */\n  async create(createAppDto: CreateAppDto, user: UserEntity) {\n    const app = new App();\n    app.name = createAppDto.name;\n    app.key = uuid();\n    const accessToken = this.jwtService.sign({\n      name: createAppDto.name,\n      key: app.key,\n    });\n    app.secret = accessToken;\n\n    await this.connection.manager.save(app);\n    user.apps = [app];\n    return await this.connection.manager.save(user);\n  }\n\n  async findAll(user: UserEntity) {\n    const userRepo = this.connection.getRepository(UserEntity);\n    const userApps = await userRepo.findOne({\n      where: {\n        id: user.id,\n      },\n      relations: ['apps'],\n    });\n    return userApps.apps;\n  }\n\n  async findOne(id: string) {\n    const app = await this.appRepository.findOne({\n      where: {\n        key: id,\n      },\n    });\n    if (!app) throw new NotFoundException();\n    return app;\n  }\n\n  update(id: number, updateAppDto: UpdateAppDto) {\n    return `This action updates a #${id} app`;\n  }\n\n  async remove(id: string) {\n    const app = await this.appRepository.findOne({ where: { key: id } });\n    if (!app) throw new NotFoundException();\n    return await this.connection.manager.remove(app);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Audience.html":{"url":"classes/Audience.html","title":"class - Audience","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Audience\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/audience/entities/audience.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        RecordChanges\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                token\n                            \n                            \n                                    Optional\n                                created\n                            \n                            \n                                is_deleted\n                            \n                            \n                                    Optional\n                                updated\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/audience/entities/audience.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/audience/entities/audience.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         RecordChanges\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordChanges:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            is_deleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         RecordChanges\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordChanges:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         RecordChanges\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordChanges:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { RecordChanges } from 'src/entities/RecordChanges.entity';\nimport { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Audience extends RecordChanges {\n  @PrimaryGeneratedColumn('uuid')\n  id: number;\n\n  @Column()\n  token: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AudienceController.html":{"url":"controllers/AudienceController.html","title":"controller - AudienceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AudienceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/audience/audience.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                apps/:appId/audiences\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createAudienceDto: CreateAudienceDto, appId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/audience/audience.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAudienceDto\n                                    \n                                                CreateAudienceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    appId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/audience/audience.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/audience/audience.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/audience/audience.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateAudienceDto: UpdateAudienceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/audience/audience.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAudienceDto\n                                    \n                                                UpdateAudienceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Put,\n  Param,\n  Delete,\n  UsePipes,\n  ValidationPipe,\n  UseGuards,\n} from '@nestjs/common';\nimport { OnlyAppsGuard } from 'src/guards/OnlyAppsGuard';\nimport { AudienceService } from './audience.service';\nimport { CreateAudienceDto } from './dto/create-audience.dto';\nimport { UpdateAudienceDto } from './dto/update-audience.dto';\n\n@Controller('apps/:appId/audiences')\n@UseGuards(OnlyAppsGuard)\nexport class AudienceController {\n  constructor(private readonly audienceService: AudienceService) {}\n\n  @Post()\n  @UsePipes(ValidationPipe)\n  create(\n    @Body() createAudienceDto: CreateAudienceDto,\n    @Param('appId') appId: string,\n  ) {\n    return this.audienceService.create(appId, createAudienceDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.audienceService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.audienceService.findOne(+id);\n  }\n\n  @Put(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateAudienceDto: UpdateAudienceDto,\n  ) {\n    return this.audienceService.update(+id, updateAudienceDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.audienceService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AudienceModule.html":{"url":"modules/AudienceModule.html","title":"module - AudienceModule","body":"\n                   \n\n\n\n\n    Modules\n    AudienceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AudienceModule\n\n\n\ncluster_AudienceModule_providers\n\n\n\n\nAudienceService\n\nAudienceService\n\n\n\nAudienceModule\n\nAudienceModule\n\nAudienceModule -->\n\nAudienceService->AudienceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/audience/audience.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AudienceService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AudienceController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AudienceService } from './audience.service';\nimport { AudienceController } from './audience.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppRepository } from 'src/apps/repository/app.repository';\nimport { AudienceRepository } from './repository/audience.repository';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.register({\n      secret: 'secretfornow',\n      signOptions: {\n        expiresIn: 3600 * 60 * 60,\n      },\n    }),\n    TypeOrmModule.forFeature([AppRepository, AudienceRepository]),\n  ],\n  controllers: [AudienceController],\n  providers: [AudienceService],\n})\nexport class AudienceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AudienceRepository.html":{"url":"classes/AudienceRepository.html","title":"class - AudienceRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AudienceRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/audience/repository/audience.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { Audience } from '../entities/audience.entity';\n\n@EntityRepository(Audience)\nexport class AudienceRepository extends Repository {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AudienceService.html":{"url":"injectables/AudienceService.html","title":"injectable - AudienceService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AudienceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/audience/audience.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appRepository: AppRepository, audienceRepository: AudienceRepository, connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/audience/audience.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appRepository\n                                                  \n                                                        \n                                                                        AppRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        audienceRepository\n                                                  \n                                                        \n                                                                        AudienceRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(appId: string, createAudienceDto: CreateAudienceDto)\n                \n            \n\n\n            \n                \n                    Defined in src/audience/audience.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    appId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createAudienceDto\n                                    \n                                                CreateAudienceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/audience/audience.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/audience/audience.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/audience/audience.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateAudienceDto: UpdateAudienceDto)\n                \n            \n\n\n            \n                \n                    Defined in src/audience/audience.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAudienceDto\n                                    \n                                                UpdateAudienceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectConnection, InjectRepository } from '@nestjs/typeorm';\nimport { AppRepository } from 'src/apps/repository/app.repository';\nimport { Connection } from 'typeorm';\nimport { CreateAudienceDto } from './dto/create-audience.dto';\nimport { UpdateAudienceDto } from './dto/update-audience.dto';\nimport { AudienceRepository } from './repository/audience.repository';\n\n@Injectable()\nexport class AudienceService {\n  constructor(\n    @InjectRepository(AppRepository)\n    private appRepository: AppRepository,\n    @InjectRepository(AudienceRepository)\n    private audienceRepository: AudienceRepository,\n    @InjectConnection()\n    private connection: Connection,\n  ) {}\n  async create(appId: string, createAudienceDto: CreateAudienceDto) {\n    const app = await this.appRepository.findOne({ where: { key: appId } });\n    console.log(app);\n    return 'This action adds a new audience';\n  }\n\n  findAll() {\n    return `This action returns all audience`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} audience`;\n  }\n\n  update(id: number, updateAudienceDto: UpdateAudienceDto) {\n    return `This action updates a #${id} audience`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} audience`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(auth: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    auth\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            me\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    me(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/me')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(auth: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(ValidationPipe)@Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    auth\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Req,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthCredentialsDto } from './auth-credentials.dto';\nimport { AuthService } from './auth.service';\nimport { GetUser } from './get-user.decorator';\nimport { UserEntity } from './User.entity';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n  @Post('/login')\n  async login(@Body() auth: AuthCredentialsDto) {\n    return this.authService.login(auth);\n  }\n  @UsePipes(ValidationPipe)\n  @Post('/register')\n  async register(@Body() auth: AuthCredentialsDto) {\n    return this.authService.signUp(auth);\n  }\n\n  @Get('/me')\n  @UseGuards(AuthGuard())\n  async me(@GetUser() user: UserEntity) {\n    return {\n      username: user.username,\n      id: user.id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthCredentialsDto.html":{"url":"classes/AuthCredentialsDto.html","title":"class - AuthCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth-credentials.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsAlphanumeric()@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth-credentials.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth-credentials.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlphanumeric, IsEmail, MinLength } from 'class-validator';\n\nexport class AuthCredentialsDto {\n  @IsEmail()\n  username: string;\n\n  @IsAlphanumeric()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJWTStrategy \n\nJWTStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJWTStrategy  -->\n\nAuthModule->JWTStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJWTStrategy\n\nJWTStrategy\n\nAuthModule -->\n\nJWTStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JWTStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JWTStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserRepository } from './User.repository';\nimport { PassportModule } from '@nestjs/passport';\nimport { JWTStrategy } from './JWTStrategy';\n\n@Module({\n  imports: [\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.register({\n      secret: 'secretfornow',\n      signOptions: {\n        expiresIn: 3600 * 60 * 60,\n      },\n    }),\n    TypeOrmModule.forFeature([UserRepository]),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JWTStrategy],\n  exports: [JWTStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginCredentials: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginCredentials\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthCredentialsDto } from './auth-credentials.dto';\nimport { IJWTPayload } from './interfaces/IJWTPayload';\nimport { UserRepository } from './User.repository';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepo: UserRepository,\n    private jwtService: JwtService,\n  ) {}\n\n  async signUp(authCredentialsDto: AuthCredentialsDto) {\n    return await this.userRepo.signUp(authCredentialsDto);\n  }\n\n  async login(\n    loginCredentials: AuthCredentialsDto,\n  ): Promise {\n    const user = await this.userRepo.validatePassword(loginCredentials);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    const accessToken = await this.jwtService.sign(user);\n    return {\n      accessToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContactModes.html":{"url":"classes/ContactModes.html","title":"class - ContactModes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContactModes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contact-modes/contact-modes.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        RecordChanges\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                tpye\n                            \n                            \n                                    Optional\n                                created\n                            \n                            \n                                is_deleted\n                            \n                            \n                                    Optional\n                                updated\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contact-modes/contact-modes.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tpye\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/contact-modes/contact-modes.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         RecordChanges\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordChanges:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            is_deleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         RecordChanges\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordChanges:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         RecordChanges\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordChanges:13\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { RecordChanges } from 'src/entities/RecordChanges.entity';\nimport { Entity, PrimaryColumn, Column } from 'typeorm';\n\n@Entity()\nexport class ContactModes extends RecordChanges {\n  @PrimaryColumn()\n  id: number;\n\n  @Column()\n  tpye: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContactModesModule.html":{"url":"modules/ContactModesModule.html","title":"module - ContactModesModule","body":"\n                   \n\n\n\n\n    Modules\n    ContactModesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contact-modes/contact-modes.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n@Module({})\nexport class ContactModesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAppDto.html":{"url":"classes/CreateAppDto.html","title":"class - CreateAppDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAppDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apps/dto/create-app.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MaxLength(50)@MinLength(8)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/apps/dto/create-app.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MaxLength, MinLength } from 'class-validator';\n\nexport class CreateAppDto {\n  @IsString()\n  @MaxLength(50)\n  @MinLength(8)\n  name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAudienceDto.html":{"url":"classes/CreateAudienceDto.html","title":"class - CreateAudienceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAudienceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/audience/dto/create-audience.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsAlphanumeric()@MinLength(3)@MaxLength(50)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/audience/dto/create-audience.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsAlphanumeric, MaxLength, MinLength } from 'class-validator';\n\nexport class CreateAudienceDto {\n  @IsAlphanumeric()\n  @MinLength(3)\n  @MaxLength(50)\n  token: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDTO.html":{"url":"classes/CreateNotificationDTO.html","title":"class - CreateNotificationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/dto/create-notification-dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/notifications/dto/create-notification-dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NotificationTypeEnum\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(NotificationTypeEnum)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/notifications/dto/create-notification-dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/notifications/dto/create-notification-dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsEnum, isNotEmpty, IsString } from 'class-validator';\nimport { NotificationTypeEnum } from 'src/enums/NotificationTypeEnum';\n\nexport class CreateNotificationDTO {\n  @IsNotEmpty()\n  user: string[];\n\n  @IsString()\n  message: string;\n\n  @IsEnum(NotificationTypeEnum)\n  type: NotificationTypeEnum;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.provider';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJWTPayload.html":{"url":"interfaces/IJWTPayload.html","title":"interface - IJWTPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IJWTPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/IJWTPayload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IJWTPayload {\n  username: string;\n  id: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JWTStrategy.html":{"url":"injectables/JWTStrategy.html","title":"injectable - JWTStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JWTStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/JWTStrategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/JWTStrategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: IJWTPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/JWTStrategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                IJWTPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { IJWTPayload } from './interfaces/IJWTPayload';\nimport { UserEntity } from './User.entity';\nimport { UserRepository } from './User.repository';\n\n@Injectable()\nexport class JWTStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'secretfornow',\n    });\n  }\n\n  async validate(payload: IJWTPayload): Promise {\n    const { username } = payload;\n    const user = this.userRepository.findOne({\n      username,\n    });\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Notification.html":{"url":"classes/Notification.html","title":"class - Notification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notification.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                message\n                            \n                            \n                                notification_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/notifications/notification.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/notifications/notification.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notification_type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NotificationTypeEnum\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: NotificationTypeEnum, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/notifications/notification.entity.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\nimport { NotificationTypeEnum } from 'src/enums/NotificationTypeEnum';\n\n@Entity()\nexport class Notification {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  message: string;\n\n  @Column({\n    type: 'enum',\n    enum: NotificationTypeEnum,\n    default: NotificationTypeEnum.MEDIUM,\n  })\n  notification_type: NotificationTypeEnum;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationTrackersModule.html":{"url":"modules/NotificationTrackersModule.html","title":"module - NotificationTrackersModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationTrackersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notification-trackers/notification-trackers.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n@Module({})\nexport class NotificationTrackersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationsController.html":{"url":"controllers/NotificationsController.html","title":"controller - NotificationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notifications\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                index\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateNotificationDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateNotificationDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            index\n                        \n                        \n                    \n                \n            \n            \n                \nindex()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/notifications/notifications.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateNotificationDTO } from './dto/create-notification-dto';\n\n@Controller('notifications')\nexport class NotificationsController {\n  @Post()\n  @UsePipes(ValidationPipe)\n  createTask(@Body() createTaskDto: CreateNotificationDTO) {\n    console.log(createTaskDto);\n    return [];\n  }\n  @Get()\n  index() {\n    return 'sa';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationsModule.html":{"url":"modules/NotificationsModule.html","title":"module - NotificationsModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notifications/notifications.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            NotificationsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { NotificationsController } from './notifications.controller';\n\n@Module({\n  controllers: [NotificationsController],\n})\nexport class NotificationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/OnlyAppsGuard.html":{"url":"guards/OnlyAppsGuard.html","title":"guard - OnlyAppsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    OnlyAppsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/OnlyAppsGuard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/OnlyAppsGuard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class OnlyAppsGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    console.log(context);\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecordChanges.html":{"url":"classes/RecordChanges.html","title":"class - RecordChanges","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecordChanges\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/RecordChanges.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                created\n                            \n                            \n                                is_deleted\n                            \n                            \n                                    Optional\n                                updated\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/RecordChanges.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            is_deleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/RecordChanges.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/RecordChanges.entity.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport class RecordChanges extends BaseEntity {\n  @CreateDateColumn({ type: 'timestamp' })\n  created?: Date;\n\n  @UpdateDateColumn()\n  updated?: Date;\n\n  @DeleteDateColumn()\n  is_deleted: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAppDto.html":{"url":"classes/UpdateAppDto.html","title":"class - UpdateAppDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAppDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apps/dto/update-app.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAppDto } from './create-app.dto';\n\nexport class UpdateAppDto extends PartialType(CreateAppDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAudienceDto.html":{"url":"classes/UpdateAudienceDto.html","title":"class - UpdateAudienceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAudienceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/audience/dto/update-audience.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateAudienceDto   {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class User {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/User.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        RecordChanges\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                apps\n                            \n                            \n                                first_name\n                            \n                            \n                                id\n                            \n                            \n                                last_name\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                username\n                            \n                            \n                                    Optional\n                                created\n                            \n                            \n                                is_deleted\n                            \n                            \n                                    Optional\n                                updated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            apps\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         App[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/User.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            first_name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/User.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/User.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            last_name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/User.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({select: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/User.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({select: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/User.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/User.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'timestamp'})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         RecordChanges\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordChanges:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            is_deleted\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         RecordChanges\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordChanges:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         RecordChanges\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordChanges:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/User.entity.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { App } from 'src/apps/entities/app.entity';\nimport { RecordChanges } from 'src/entities/RecordChanges.entity';\n\n@Entity()\nexport class UserEntity extends RecordChanges {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    nullable: true,\n  })\n  first_name: string;\n\n  @Column({\n    nullable: true,\n  })\n  last_name: string;\n\n  @Column({\n    unique: true,\n  })\n  username: string;\n\n  @Column({\n    select: false,\n  })\n  password: string;\n\n  @Column({\n    select: false,\n  })\n  salt: string;\n\n  @ManyToMany(() => App)\n  @JoinTable()\n  apps: App[];\n\n  async validatePassword(password: string): Promise {\n    const hash = await bcrypt.hash(password, this.salt);\n    return hash === this.password;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/User.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addApps\n                            \n                            \n                                hashPassword\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addApps\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addApps(userId: number, app: App[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/User.repository.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    app\n                                    \n                                                App[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \nhashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/User.repository.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentials: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/User.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentials\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/User.repository.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { EntityRepository, Repository } from 'typeorm';\nimport { AuthCredentialsDto } from './auth-credentials.dto';\nimport { UserEntity } from './User.entity';\nimport * as bcrypt from 'bcrypt';\nimport { USERNAME_EXISTS } from 'src/constants/errors';\nimport { ER_DUP_ENTRY } from 'src/constants/values';\nimport { App } from 'src/apps/entities/app.entity';\n\n@EntityRepository(UserEntity)\nexport class UserRepository extends Repository {\n  async signUp(authCredentials: AuthCredentialsDto) {\n    try {\n      const salt = await bcrypt.genSalt();\n      const user = new UserEntity();\n      user.username = authCredentials.username;\n      user.password = this.hashPassword(authCredentials.password, salt);\n      user.salt = salt;\n      await user.save();\n    } catch (err) {\n      if (err.code === ER_DUP_ENTRY) {\n        throw new ConflictException(USERNAME_EXISTS);\n      }\n      // @todo add logger\n      throw new InternalServerErrorException();\n    }\n  }\n  hashPassword(password: string, salt: string) {\n    return bcrypt.hashSync(password, salt);\n  }\n\n  async validatePassword(\n    authCredentialsDto: AuthCredentialsDto,\n  ): Promise> {\n    const { username, password } = authCredentialsDto;\n    const user = await this.findOne(\n      {\n        username,\n      },\n      {\n        select: ['password', 'id', 'username', 'salt'],\n      },\n    );\n    if (user && (await user.validatePassword(password))) {\n      return {\n        id: user.id,\n        username: user.username,\n      };\n    }\n  }\n\n  async addApps(userId: number, app: App[]) {\n    const user = await this.findOne({\n      id: userId,\n    });\n    user.apps = app;\n    await user.save();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Put, Param, Delete } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(+id);\n  }\n\n  @Put(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UsersService {\n  create(createUserDto: CreateUserDto) {\n    return 'This action adds a new user';\n  }\n\n  findAll() {\n    return `This action returns all users`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} user`;\n  }\n\n  update(id: number, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} user`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/apps/apps.controller.ts\n            \n            controller\n            AppsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/apps/apps.service.ts\n            \n            injectable\n            AppsService\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/apps/dto/create-app.dto.ts\n            \n            class\n            CreateAppDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/apps/dto/update-app.dto.ts\n            \n            class\n            UpdateAppDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/apps/entities/app.entity.ts\n            \n            class\n            App\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/apps/repository/app.repository.ts\n            \n            class\n            AppRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/audience/audience.controller.ts\n            \n            controller\n            AudienceController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/audience/audience.service.ts\n            \n            injectable\n            AudienceService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/audience/dto/create-audience.dto.ts\n            \n            class\n            CreateAudienceDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/audience/dto/update-audience.dto.ts\n            \n            class\n            UpdateAudienceDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/audience/entities/audience.entity.ts\n            \n            class\n            Audience\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/audience/repository/audience.repository.ts\n            \n            class\n            AudienceRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/JWTStrategy.ts\n            \n            injectable\n            JWTStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/User.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auth/User.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth-credentials.dto.ts\n            \n            class\n            AuthCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/IJWTPayload.ts\n            \n            interface\n            IJWTPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/constants/errors.ts\n            \n            variable\n            USERNAME_EXISTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/values.ts\n            \n            variable\n            DB_HOST\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/values.ts\n            \n            variable\n            DB_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/values.ts\n            \n            variable\n            DB_PASSWORD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/values.ts\n            \n            variable\n            DB_PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/values.ts\n            \n            variable\n            DB_TYPE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/values.ts\n            \n            variable\n            DB_USERNAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/values.ts\n            \n            variable\n            ER_DUP_ENTRY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contact-modes/contact-modes.entity.ts\n            \n            class\n            ContactModes\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/database.provider.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/RecordChanges.entity.ts\n            \n            class\n            RecordChanges\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guards/OnlyAppsGuard.ts\n            \n            guard\n            OnlyAppsGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notifications/dto/create-notification-dto.ts\n            \n            class\n            CreateNotificationDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/notifications/notification.entity.ts\n            \n            class\n            Notification\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/notifications/notifications.controller.ts\n            \n            controller\n            NotificationsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/configs.ts\n            \n            function\n            dbConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/configs.ts\n            \n            function\n            envOrConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/configs.ts\n            \n            function\n            onlyConfig\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/event-emitter : 0.0.2\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mapped-types : ^0.1.1\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @types/bcrypt : ^3.0.0\n        \n            @types/config : 0.0.37\n        \n            @types/passport-jwt : ^3.0.3\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            config : ^3.3.3\n        \n            mysql : ^2.18.1\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            typeorm : ^0.2.29\n        \n            uuid : ^8.3.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NotificationTypeEnum   (src/.../NotificationTypeEnum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/enums/NotificationTypeEnum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationTypeEnum\n                    \n                \n                        \n                            \n                                 URGENT\n                            \n                        \n                        \n                            \n                                Value : URGENT\n                            \n                        \n                        \n                            \n                                 HIGH\n                            \n                        \n                        \n                            \n                                Value : HIGH\n                            \n                        \n                        \n                            \n                                 MEDIUM\n                            \n                        \n                        \n                            \n                                Value : MEDIUM\n                            \n                        \n                        \n                            \n                                 LOW\n                            \n                        \n                        \n                            \n                                Value : LOW\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            dbConfig   (src/.../configs.ts)\n                        \n                        \n                            envOrConfig   (src/.../configs.ts)\n                        \n                        \n                            onlyConfig   (src/.../configs.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/configs.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            dbConfig\n                        \n                        \n                    \n                \n            \n            \n                \ndbConfig(key)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            envOrConfig\n                        \n                        \n                    \n                \n            \n            \n                \nenvOrConfig(key, defaultValue?: any)\n                \n            \n\n\n\n\n            \n                \n                    First try to return data from env and if not found will return\nfrom config\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    defaultValue\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onlyConfig\n                        \n                        \n                    \n                \n            \n            \n                \nonlyConfig(key)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AudienceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContactModesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationTrackersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppsModule\n\n\n\ncluster_AppsModule_providers\n\n\n\ncluster_AudienceModule\n\n\n\ncluster_AudienceModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAppsModule\n\nAppsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppsModule->AppModule\n\n\n\n\n\nAudienceModule\n\nAudienceModule\n\nAppModule -->\n\nAudienceModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJWTStrategy \n\nJWTStrategy \n\nJWTStrategy  -->\n\nAuthModule->JWTStrategy \n\n\n\n\n\nContactModesModule\n\nContactModesModule\n\nAppModule -->\n\nContactModesModule->AppModule\n\n\n\n\n\nNotificationTrackersModule\n\nNotificationTrackersModule\n\nAppModule -->\n\nNotificationTrackersModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAppsService\n\nAppsService\n\nAppsModule -->\n\nAppsService->AppsModule\n\n\n\n\n\nAudienceService\n\nAudienceService\n\nAudienceModule -->\n\nAudienceService->AudienceModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJWTStrategy\n\nJWTStrategy\n\nAuthModule -->\n\nJWTStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseProviders   (src/.../database.provider.ts)\n                        \n                        \n                            DB_HOST   (src/.../values.ts)\n                        \n                        \n                            DB_NAME   (src/.../values.ts)\n                        \n                        \n                            DB_PASSWORD   (src/.../values.ts)\n                        \n                        \n                            DB_PORT   (src/.../values.ts)\n                        \n                        \n                            DB_TYPE   (src/.../values.ts)\n                        \n                        \n                            DB_USERNAME   (src/.../values.ts)\n                        \n                        \n                            ER_DUP_ENTRY   (src/.../values.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            USERNAME_EXISTS   (src/.../errors.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database.provider.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: 'DATABASE_CONNECTION',\n    useFactory: async () =>\n      await createConnection({\n        type: 'mysql',\n        host: 'localhost',\n        port: 6603,\n        username: 'root',\n        password: 'helloworld',\n        database: 'notifications_saas',\n        // autoLoadEntities: true,\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        synchronize: true,\n      }),\n  },\n]\n                        \n                    \n\n\n            \n        \n\n    src/constants/values.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DB_HOST\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'host'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DB_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'database'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DB_PASSWORD\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'password'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DB_PORT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'port'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DB_TYPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'type'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DB_USERNAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'username'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ER_DUP_ENTRY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ER_DUP_ENTRY'\n                        \n                    \n\n\n            \n        \n\n    src/auth/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (_, ctx: ExecutionContext): UserEntity => {\n    const req = ctx.switchToHttp().getRequest();\n    return req.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/constants/errors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            USERNAME_EXISTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'username_exists'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
